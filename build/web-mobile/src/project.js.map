{"version":3,"sources":["assets/script/AppFacade.ts","assets/script/manager/AudioManager.ts","assets/script/view/component/BaseUI.ts","assets/script/view/component/Chessboard.ts","assets/script/Constants.ts","assets/script/services/platform/DevPlatform.ts","assets/script/controller/GameCommand.ts","assets/script/model/GameProxy.ts","assets/script/model/vo/GameVO.ts","assets/script/view/GameViewMediator.ts","assets/script/view/component/GameView.ts","assets/script/view/component/HelpView.ts","assets/script/services/platform/IPlatform.ts","assets/script/view/component/LoadingView.ts","assets/script/view/MenuViewMediator.ts","assets/script/view/component/MenuView.ts","assets/script/services/mgobe/MgobeService.ts","assets/script/manager/Platform.ts","assets/script/view/component/Player.ts","assets/script/view/component/PopupView.ts","assets/script/model/RoomProxy.ts","assets/script/model/vo/RoomVO.ts","assets/script/view/RoomViewMediator.ts","assets/script/view/component/RoomView.ts","assets/script/Start.ts","assets/script/view/component/TipView.ts","assets/script/view/component/Tip.ts","assets/script/manager/UIManager.ts","assets/script/controller/UserCommand.ts","assets/script/model/UserProxy.ts","assets/script/model/vo/UserVO.ts","assets/script/util/Util.ts","assets/script/services/platform/WXPlatform.ts","assets/script/view/WelcomeViewMediator.ts","assets/script/view/component/WelcomeView.ts","assets/script/library/wechat/wxApi.ts"],"names":["UserProxy_1","require","UserCommand_1","RoomProxy_1","GameCommand_1","GameProxy_1","AppFacade","_super","call","this","__extends","getInstance","instance","prototype","startup","initializeFacade","initializeModel","registerProxy","default","initializeController","register","initializeView","STARTUP","puremvc","Facade","exports","Constants_1","AudioManager","bgm","playSound","soundName","loop","volume","path","ProjectConfig","AUDIO_DIR","cc","loader","loadRes","AudioClip","err","clip","error","audioEngine","play","stopAll","pauseAll","resumeAll","playBGM","stopMusic","playMusic","resumeBGM","_a","_decorator","ccclass","BaseUI","property","Object","defineProperty","get","mTag","set","value","getUrl","log","NAME","PREFAB_UI_DIR","onDestroy","onShow","__decorate","Component","GameVO_1","Util_1","ChessBoard","_this","apply","arguments","hWall","vWall","hWallShadow","vWallShadow","chessPrefab","hintPrefab","chessNodes","hintNodes","wallNodes","wallPositions","onLoad","chessBoardSize","node","getContentSize","unit","width","i","chessNode","instantiate","parent","name","toString","active","push","getComponent","Button","interactable","wallNode","wallNodeWidth","isShowHint","updateView","game","console","playerCnt","getPlayerCntByType","gameType","setChessView","playersInfo","avatarUrl","setChessPosition","chessPosition","chessButton","on","onChessClick","nowPlayerID","playerID","result","status","GameStatus","END","listenChessBoard","removeListenChessBoard","clearWall","walls","length","addWall","position","wallType","clearView","touchWallNode","destroy","touchWallShadowNode","hideChessHint","head","getChildByName","headBG","Sprite","load","url","type","texture","spriteFrame","SpriteFrame","moveChessCallback","moveWallCallback","getAllHintPosition","event","data","positions","showChessHint","onChessHintClick","worldPoint","getLocation","nowPoint","convertToNodeSpaceAR","x","y","Math","round","Position","hintNode","px","py","hintButton","clickEventHandler","EventHandler","target","component","handler","customEventData","clickEvents","WallType","HORIZONTAL","VERTICAL","Node","EventType","TOUCH_START","onChessTouchStart","TOUCH_MOVE","onChessTouchMove","TOUCH_END","onChessTouchEnd","TOUCH_CANCEL","onChessTouchCancel","off","startPoint","anchorX","touchWallType","touchWallPosition","touchStartPosition","abs","tmp","action","rotateTo","runAction","setSiblingIndex","Prefab","WorldNotification","RoomNotification","GameNotification","GameAction","PlayerStatus","RoomStatus","GameType","Scene","ChessboardLimit","Config","WXCloudEnvID","MGOBEGameId","MGOBESecretKey","MGOBEHost","reconnectMaxTimes","reconnectInterval","resendInterval","resendTimeout","isDebug","matchCode1v1","matchCode1v1v1v1","DevPlatform","getOpenID","mockOpenId","authSettingOfUserInfo","createUserInfoButton","getUserInfo","nickName","gender","language","city","province","country","shareAppMessage","title","imageUrl","imageUrlId","query","getLaunchOption","getLaunchOptionOnShow","callback","showLoading","isMask","hideLoading","showToast","duration","hideToast","showModal","content","showCancel","confirmText","cancelText","hideModal","str","Date","now","ceil","random","pow","substr","WallLegalType","GameCommand","execute","notification","getName","isUserEnd","pos","gameInfo","facade","retrieveProxy","getGame","rotationChess","CHESS_LIMIT","isWallLegal","wallInfo","playerCount","wallLeftCnt","NOT_HAVE","_isWallLegal","OVER_LAP","playersPos","Array","_isWallSeal","SEAL","RIGHT","WALL_LIMIT","newWalls","forEach","wall","_isChessCanEnd","playerIndex","firstPosition","otherPlayerPos","queue","nowPosition","_getAllLocation","j","_isUserEndForZero","_isInQueue","rotationMul","rotationCnt","_rotationPosition","getAllLocation","arrivalMap","_initWallMap","legalCoordinate","directions","nowCheckPos","locations","_checkDirection","directionType","nowPos","judgePos","_getJudgePos","_isTransboundary","_isLocHasPiece","leftPos","rightPos","upPos","downPos","arrival","arr","rotationWall","fromPlayerID","toPlayerID","fromPlayerIndex","toPlayerIndex","WallVO","chessInfo","height","resultPos","SimpleCommand","GameProxy","frames","GameVO","getFrames","pushFrame","frame","clearFrame","playerId","playerMaxNum","moveChess","checkEnd","roomProxy","setRoomStatus","GAME_END","player","onlineNum","DEFAULT","OFFLINE","changeNowPlayer","time","idx","newIdx","nowActionStartTime","setPlayerResult","getMaxPlayerResult","maxResult","max","setPlayerStatus","createGame","room","GAME_ING","mePlayerIdx","firstPlayerIdx","parse","maxActionDuration","gamePlayer","roomPlayer","Proxy","PlayerVO","isReady","GameView_1","MgobeService_1","IPlatform_1","UIManager_1","MenuView_1","HelpView_1","Chessboard_1","RoomView_1","AudioManager_1","GameViewMediator","viewComponent","listNotificationInterests","GAME_UPDATE","handleNotification","gameProxy","getBody","onRegister","startFrameSync","code","MGOBE","ErrCode","EC_OK","listenGame","initView","initCallback","onRemove","stopFrameSync","removeListenGame","clearReadyState","getRoom","UIManager","showTip","showUI","closeUI","userProxy","chessBoardVC","chessBoardLayer","menuButton","menuNode","leaveButton","Platform","isConfirm","getPlayerId","LEAVE","sendFrame","leaveRoom","helpButton","openUISync","HelpView","backMenuButton","continueButton","initRoom","timeoutCallback","MOVE_CHESS","new_idx","sendNotification","ADD_WALL","onRecvFrame","calcFrame","onRecvFromClient","onChangePlayerNetworkState","networkState","ENUM","NetworkState","RELAY_OFFLINE","changePlayerId","RELAY_ONLINE","unscheduleAllCallbacks","onAutoRequestFrameError","retryAutoRequestFrame","gameCommand","items","item","game_1","getMyRoom","EC_ROOM_PLAYER_NOT_IN_ROOM","changeCustomPlayerStatus","Mediator","AppFacade_1","GameViewMediator_1","BaseUI_1","Player_1","GameView","giveupButton","player0Node","player1Node","player2Node","player3Node","barNode","winTitle","loseTitle","start","registerMediator","removeMediator","playerNodeArray","_loop_1","Player","setWallNum","setPlayer","setStatus","callback_1","nowTime","interval","setTime","unschedule","this_1","schedule","macro","REPEAT_FOREVER","platform","WXPlatform_1","DevPlatform_1","sys","WECHAT_GAME","LoadingView","loadNode","maskBg","LoadingView_1","update","dt","rotateLoadingFrame","angle","MenuViewMediator","RUN_LAUNCH","actionByLaunchQuery","userInfo","playerNode","playerGame","matchButton","getModeType","hideUI","teamButton","createRoom","machineButton","rankButton","mode2Button","mode4Button","setModeType","showLoadingSync","setRoom","roomInfo","EC_ROOM_PLAYER_ALREADY_IN_ROOM","joinRoom","roomId","EC_ROOM_INFO_UNEXIST","launch","getLaunch","setLaunch","scene","MATCH_ING","MATCH_SUCC","TEAM","MATCH_WILL","MenuViewMediator_1","MenuView","modeType","MgobeService","isStartFrameSync","frameSyncState","FrameSyncState","START","sendFramePara","sendToClient","msg","sendToClientPara","recvPlayerList","recvType","types","RecvType","ROOM_ALL","Room","getRoomByRoomIdPara2","getRoomByRoomId","joinRoomPara","playerInfo","customPlayerStatus","customProfile","maxPlayers","roomType","createRoomPara","roomName","isPrivate","customProperties","cancelMatch","cancelMatchPara","matchType","MatchType","PLAYER_COMPLEX","cancelPlayerMatch","matchPlayers","matchAttributes","matchCode","MATCH4","matchPlayersPara","changeCustomPlayerStatusPara","isInited","id","initMgobeSDK","openId","gameId","secretKey","cacertNativeUrl","config","isAutoRequestFrame","DebuggerLog","enable","Listener","init","add","setBroadcastCallbacks","setCallbacks","context","broadcastCallbacks","generateDefaultCallback","tag","defaultCallbacks","onUpdate","onJoinRoom","onLeaveRoom","onChangeRoom","onDismissRoom","onStartFrameSync","onStopFrameSync","onChangeCustomPlayerStatus","onRemovePlayer","onRecvFromGameSvr","keys","key","bind","WXPlatform","nickNameNode","headNode","headWaitNode","readyNode","wallCntNode","timeNode","leaveNode","offlineNode","Label","cutstr","string","setWait","isWait","setReady","wallcnt","isShow","PopupView","loadingNode","RoomVO_1","RoomProxy","RoomVO","MATCH2","TEAM2","TEAM4","isRoomReady","ROOM_UPDATE","meIdx","playerList","new_i","RoomViewMediator","ROOM_LEAVE","updateRoom","director","loadScene","MENU","listenRoom","removeListenRoom","Animation","matchCancelButton","matchBeginButton","teamReadyButton","teamUnreadyButton","teamInviteButton","EC_MATCH_TIMEOUT","EC_MATCH_PLAYER_IS_IN_MATCH","RoomViewMediator_1","RoomView","matchBarNode","WelcomeView_1","Start","initFrameSize","loadStartView","frameSize","view","getFrameSize","bFitWidth","Canvas","fitWidth","fitHeight","WelcomeView","Tip_1","TipView","tipPrefab","tipPool","TipView_1","message","playTip","TipNode","tip","Tip","tipLabel","ready","stopAllActions","reset","action0","moveTo","action1","fadeIn","action2","spawn","action3","delayTime","action4","fadeOut","callFunc","sequence","setPosition","opacity","uiList","uiRoot","find","ui","sent","getUI","uiClass","zOrder","onProgress","args","_i","loadResSync","completedCount","totalCount","prefab","uiNode","zIndex","splice","progressCallback","completeCallback","__awaiter","Promise","resolve","reject","resource","UserCommand","UserVO_1","UserProxy","user","UserVO","setUserInfo","setOpenId","getOpenId","setPlayerId","Util","len","str_length","str_cut","String","str_len","a","charAt","escape","concat","MACHINE2","preloadScene","min","wxApi_1","wxApi","login","res","callFunction","openid","e_1","window","innerWidth","innerHeight","button","wx","text","image","style","left","top","lineHeight","backgroundColor","color","textAlign","fontSize","borderRadius","onTap","getLaunchOptionsSync","mask","icon","success","confirm","cancel","WelcomeViewMediator","initialization","registerOnShow","loadLaunchOption","WelcomeViewMediator_1","fail","complete","cloud","env","checkSession","authorize","scope","withCredentials","lang","getSetting","authSetting","getUserGameLabel"],"mappings":"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","sourcesContent":["import UserProxy from './model/UserProxy';\nimport UserCommand from \"./controller/UserCommand\";\nimport RoomProxy from './model/RoomProxy';\nimport GameCommand from './controller/GameCommand';\nimport GameProxy from './model/GameProxy';\n\nexport default class AppFacade extends puremvc.Facade implements puremvc.IFacade {\n    public constructor() {\n        super();\n    }\n\n    public static STARTUP = 'startup';\n\n    static instance: AppFacade;\n\n    public static getInstance(): AppFacade {\n        if (AppFacade.instance == null) {\n            AppFacade.instance = new AppFacade();\n        }\n        return <AppFacade>(AppFacade.instance);\n    }\n\n    // 启动pureMvc\n    public startup() : void {\n    }\n\n    // 以下是该类的初始化函数，创建改类实例后会自动调用改函数\n    public initializeFacade() : void {\n        super.initializeFacade()\n    }\n\n    // 注册数据模型\n    public initializeModel(): void {\n        super.initializeModel();\n\n        this.registerProxy(new UserProxy());\n        this.registerProxy(new RoomProxy());\n        this.registerProxy(new GameProxy());\n    }\n\n    // 注册控制器\n    public initializeController(): void {\n        super.initializeController();\n\n        (new UserCommand()).register();\n        (new GameCommand()).register();\n    }\n\n    // 注册View视图\n    public initializeView(): void {\n        super.initializeView();\n    }\n}","import { ProjectConfig } from \"../Constants\";\n\nexport class AudioManager\n{\n    private static instance: AudioManager = null;\n\n    private bgm: string = \"\";\n\n    public static getInstance(): AudioManager\n    {\n        if(this.instance == null)\n        {\n            this.instance = new AudioManager();\n        }\n        return this.instance;\n    }\n\n    public playSound(soundName: string, loop?: boolean, volume?: number)\n    {\n        // if(GameDataManager.getInstance().getGameData().worldInfo.settingInfo.closeAudio)\n        // {\n        //     return;\n        // }\n        let path = ProjectConfig.AUDIO_DIR + soundName;\n        //cc.audioEngine.play(cc.url.raw(path), loop?loop:false, volume?volume:1);\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    var audioID = cc.audioEngine.play(clip, loop?loop:false, volume?volume:1);\n\t\t});\n    }\n\n    public stopAll()\n    {\n        cc.audioEngine.stopAll();\n    }\n\n    public pauseAll()\n    {\n        cc.audioEngine.pauseAll();\n    }\n\n    public resumeAll()\n    {\n        cc.audioEngine.resumeAll();\n    }\n\n    public playBGM(soundName: string)\n    {\n        if(this.bgm == soundName)\n        {\n            return;\n        }\n        this.bgm = soundName;\n        // if(GameDataManager.getInstance().getGameData().worldInfo.settingInfo.closeAudio)\n        // {\n        //     return;\n        // }\n        cc.audioEngine.stopMusic();\n        let path = ProjectConfig.AUDIO_DIR + soundName;\n        //cc.audioEngine.play(cc.url.raw(path), loop?loop:false, volume?volume:1);\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    cc.audioEngine.playMusic(clip, true);\n\t\t});\n    }\n\n    public resumeBGM()\n    {\n        cc.audioEngine.stopMusic();\n        let path = ProjectConfig.AUDIO_DIR + this.bgm;\n        //cc.audioEngine.play(cc.url.raw(path), loop?loop:false, volume?volume:1);\n        cc.loader.loadRes(path, cc.AudioClip, function (err, clip) {\n            if(err)\n            {\n                cc.error(err);\n                return;\n            }\n\t\t    cc.audioEngine.playMusic(clip, true);\n\t\t});\n    }\n}","import { ProjectConfig } from \"../../Constants\";\n\nexport interface UIClass<T extends BaseUI> {\n    new(): T;\n    getUrl(): string;\n}\n\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport abstract class BaseUI extends cc.Component {\n    protected static NAME = \"BaseUI\";\n\n    protected mTag: any;\n    public get tag(): any {\n        return this.mTag;\n    }\n    public set tag(value: any) {\n        this.mTag = value;\n    }\n\n    public static getUrl(): string {\n        cc.log(this.NAME);\n        return ProjectConfig.PREFAB_UI_DIR + this.NAME;\n    }\n\n    onDestroy(): void {\n        // ListenerManager.getInstance().removeAll(this);\n    }\n\n    onShow() {\n        cc.log(\"BaseUI onShow\");\n    }\n}","import { GameVO, Position } from \"../../model/vo/GameVO\";\nimport Util from \"../../util/Util\";\nimport { WallType, GameType, GameStatus } from \"../../Constants\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ChessBoard extends cc.Component {\n\n    @property(cc.Prefab)\n    hWall: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    vWall: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    hWallShadow: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    vWallShadow: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    chessPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    hintPrefab: cc.Prefab = null;\n\n    chessNodes: Array<cc.Node> = [];\n\n    // 单位长度\n    unit: number;\n    // 横木板组件宽度\n    wallNodeWidth: number;\n\n    hintNodes: Array<cc.Node> = [];\n    wallNodes: Array<cc.Node> = [];\n    wallPositions: Array<cc.Vec2> = [];\n\n    // 用于墙操作\n    touchWallNode: cc.Node;\n    touchWallShadowNode: cc.Node;\n    touchWallType: WallType;\n    touchWallPosition: Position;\n    touchStartPosition: Position;\n    isShowHint: boolean;\n\n    onLoad() {\n        let chessBoardSize = this.node.getContentSize();\n        // 单位长度\n        this.unit = chessBoardSize.width / 44;\n\n        for (let i = 0; i < 4; i++) {\n            let chessNode = cc.instantiate(this.chessPrefab);\n            chessNode.parent = this.node;\n            chessNode.name = 'chess' + i.toString();\n            chessNode.active = false;\n            this.chessNodes.push(chessNode);\n            let chessButton = this.chessNodes[i].getComponent(cc.Button);\n            chessButton.interactable = false;\n        }\n\n        // this.chessNodes[0].on('click', this.onChessClick, this);\n\n        let wallNode = cc.instantiate(this.hWall);\n        this.wallNodeWidth = wallNode.getContentSize().width;\n\n        this.isShowHint = false;\n    }\n\n    updateView(game: GameVO) {\n        console.log(\"棋盘视图更新\", game);\n        let playerCnt = Util.getPlayerCntByType(game.gameType);\n\n        // 初始化棋子视图\n        for (let i = 0; i < playerCnt; i++) {\n            this.setChessView(this.chessNodes[i], game.playersInfo[i].avatarUrl);\n            this.chessNodes[i].active = true;\n            this.setChessPosition(this.chessNodes[i], game.playersInfo[i].chessPosition);\n        }\n\n        let chessButton = this.chessNodes[0].getComponent(cc.Button);\n        chessButton.node.on('click', this.onChessClick, this);\n        // 若当前玩家可走子，设置棋子可点击\n\n        if (game.nowPlayerID == game.playersInfo[0].playerID\n            && game.playersInfo[0].result == 0\n            && game.status != GameStatus.END) {\n            this.listenChessBoard();\n            chessButton.interactable = true;\n        } else {\n            this.removeListenChessBoard();\n            chessButton.interactable = false;\n        }\n\n        // 更新棋子位置\n        for (let i = 0; i < playerCnt; i++) {\n            this.setChessPosition(this.chessNodes[i], game.playersInfo[i].chessPosition);\n        }\n\n        // 更新墙\n        this.clearWall();\n\n        for (let i = 0; i < game.walls.length; i++) {\n            this.addWall(game.walls[i].position, game.walls[i].wallType);\n        }\n    }\n\n    clearView() {\n        if (this.touchWallNode) this.touchWallNode.destroy();\n        if (this.touchWallShadowNode) this.touchWallShadowNode.destroy();\n        this.hideChessHint();\n    }\n\n    setChessView(chessNode: cc.Node, avatarUrl: string) {\n        if (!chessNode) {\n            return;\n        }\n        let head = chessNode.getChildByName('mask').getChildByName('chess')\n        let headBG = head.getComponent(cc.Sprite);\n\n        if (avatarUrl) {\n            cc.loader.load({\n                url: avatarUrl,\n                type: 'jpg'\n            }, function (err, texture) {\n                if (err == null) {\n                    headBG.spriteFrame = new cc.SpriteFrame(texture);\n                }\n                head.active = true;\n            });\n        } else {\n            head.active = true;\n        }\n    }\n\n    moveChessCallback(position: Position) { }\n\n    moveWallCallback(position: Position, wallType: WallType) { }\n\n    getAllHintPosition(): any { }\n\n    onChessClick(event, data) {\n        if (this.isShowHint) {\n            this.hideChessHint();\n        } else {\n            let positions = this.getAllHintPosition();\n            this.showChessHint(positions);\n        }\n    }\n\n    onChessHintClick(event, data) {\n        let worldPoint = event.getLocation();\n        let nowPoint = this.node.convertToNodeSpaceAR(worldPoint);\n        let x = (nowPoint.x - this.unit * 2) / (this.unit * 5);\n        let y = (nowPoint.y - this.unit * 2) / (this.unit * 5);\n        x = Math.round(x);\n        y = Math.round(y);\n        if (x == -0) {\n            x = 0;\n        }\n        if (y == -0) {\n            y = 0;\n        }\n        if (x < 0 || x > 8 || y < 0 || y > 8) {\n            x = -1;\n            y = -1;\n        }\n        this.moveChessCallback(new Position(x, y));\n        this.hideChessHint();\n    }\n\n    showChessHint(positions: Array<Position>) {\n        if (!positions) {\n            return;\n        }\n\n        this.hideChessHint();\n\n        for (let i = 0; i < positions.length; i++) {\n            let hintNode = cc.instantiate(this.hintPrefab);\n            hintNode.parent = this.node;\n            let px = positions[i].x * this.unit * 5 + this.unit * 2;\n            let py = positions[i].y * this.unit * 5 + this.unit * 2;\n            hintNode.x = px;\n            hintNode.y = py;\n            let hintButton = hintNode.getComponent(cc.Button);\n            hintButton.interactable = true;\n            // hintButton.node.on('click', this.onChessHintClick, this);\n\n            let clickEventHandler = new cc.Component.EventHandler();\n            clickEventHandler.target = this.node; // 这个 node 节点是你的事件处理代码组件所属的节点\n            clickEventHandler.component = \"Chessboard\";// 这个是代码文件名\n            clickEventHandler.handler = \"onChessHintClick\";\n            clickEventHandler.customEventData = \"\";\n\n            hintButton.clickEvents.push(clickEventHandler);\n\n            this.hintNodes.push(hintNode);\n        }\n        this.isShowHint = true;\n    }\n\n    hideChessHint() {\n        for (let i = 0; i < this.hintNodes.length; i++) {\n            this.hintNodes[i].destroy();\n        }\n        this.hintNodes = [];\n        this.isShowHint = false;\n    }\n\n    setChessPosition(chessNode: cc.Node, position: Position) {\n        if (!position) {\n            return;\n        }\n        let px = position.x * this.unit * 5 + this.unit * 2;\n        let py = position.y * this.unit * 5 + this.unit * 2;\n        chessNode.x = px;\n        chessNode.y = py;\n    }\n\n    clearWall() {\n        for (let i = 0; i < this.wallNodes.length; i++) {\n            this.wallNodes[i].destroy();\n        }\n        this.wallNodes = [];\n    }\n\n    addWall(position: Position, wallType: WallType) {\n        if (!position || !wallType) {\n            return;\n        }\n\n        let wallNode: cc.Node;\n        if (wallType == WallType.HORIZONTAL) {\n            wallNode = cc.instantiate(this.hWall);\n        } else if (wallType == WallType.VERTICAL) {\n            wallNode = cc.instantiate(this.vWall);\n        }\n\n        this.wallNodes.push(wallNode);\n\n        wallNode.parent = this.node;\n        let px = position.x * this.unit * 5 + this.unit * 4.5;\n        let py = position.y * this.unit * 5 + this.unit * 4.5;\n        wallNode.x = px;\n        wallNode.y = py;\n    }\n\n\n    listenChessBoard() {\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onChessTouchStart, this);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onChessTouchMove, this);\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onChessTouchEnd, this);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onChessTouchCancel, this);\n    }\n\n    removeListenChessBoard() {\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onChessTouchStart, this);\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onChessTouchMove, this);\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onChessTouchEnd, this);\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onChessTouchCancel, this);\n    }\n\n    // 棋盘触控事件回调\n    onChessTouchStart(event) {\n        console.log(\"onChessTouchStart\");\n        this.clearView();\n\n        // 获取当前触控坐标并转换为棋盘相对坐标\n        let worldPoint = event.getLocation();\n        let startPoint = this.node.convertToNodeSpaceAR(worldPoint);\n\n        // 创建木板投影\n        this.touchWallShadowNode = cc.instantiate(this.hWallShadow);\n        this.touchWallShadowNode.active = false;\n        this.touchWallShadowNode.parent = this.node;\n\n        // 创建拖动木板\n        this.touchWallNode = cc.instantiate(this.hWall);\n        this.touchWallNode.active = false;\n        this.touchWallNode.parent = this.node;\n\n        // 将锚点放置在0.75，为了木板的横竖切换\n        this.touchWallNode.anchorX = 0.75;\n\n        // 初始化拖动木板的类型、坐标\n        this.touchWallType = WallType.HORIZONTAL;\n        this.touchWallPosition = new Position(-1, -1);\n\n        // 记录起始触控坐标，用于防止误触\n        this.touchStartPosition = startPoint;\n    }\n\n    onChessTouchMove(event) {\n        console.log(\"onChessTouchMove\");\n\n        let worldPoint = event.getLocation();\n        let nowPoint = this.node.convertToNodeSpaceAR(worldPoint);\n\n        if (Math.abs(nowPoint.x - this.touchStartPosition.x) < this.unit\n            && Math.abs(nowPoint.y - this.touchStartPosition.y) < this.unit) {\n            return;\n        }\n\n        // 将move的偏移量作用至wall\n        this.touchWallNode.position = nowPoint;\n        this.touchWallNode.y += this.unit * 10;\n        this.touchWallNode.active = true;\n\n        // 判断是否改变wall形状\n        let tmp = (nowPoint.x + this.unit * 0.5) % (this.unit * 5);\n        if (tmp > this.unit * 1.5) {\n            tmp = this.unit * 5 - tmp;\n        }\n\n        if (tmp < this.unit * 1.3) {\n            if (this.touchWallType == WallType.HORIZONTAL) {\n                let action = cc.rotateTo(0.2, 90);\n                this.touchWallNode.runAction(action);\n                this.touchWallType = WallType.VERTICAL;\n\n            }\n            this.touchWallShadowNode.destroy();\n            this.touchWallShadowNode = cc.instantiate(this.vWallShadow);\n            this.touchWallShadowNode.active = false;\n            this.touchWallShadowNode.parent = this.node;\n            this.touchWallShadowNode.setSiblingIndex(0);\n        } else {\n            if (this.touchWallType == WallType.VERTICAL) {\n                let action = cc.rotateTo(0.2, 0);\n                this.touchWallNode.runAction(action);\n                this.touchWallType = WallType.HORIZONTAL;\n            }\n            this.touchWallShadowNode.destroy();\n            this.touchWallShadowNode = cc.instantiate(this.hWallShadow);\n            this.touchWallShadowNode.active = false;\n            this.touchWallShadowNode.parent = this.node;\n            this.touchWallShadowNode.setSiblingIndex(0);\n        }\n\n        // 计算当前木板所在逻辑坐标\n        let x: number, y: number;\n        if (this.touchWallType == WallType.HORIZONTAL) {\n            x = (this.touchWallNode.position.x - this.unit * 4.5 - this.wallNodeWidth * 0.25) / (this.unit * 5);\n            y = (this.touchWallNode.position.y - this.unit * 4.5) / (this.unit * 5);\n        } else {\n            x = (this.touchWallNode.position.x - this.unit * 4.5) / (this.unit * 5);\n            y = (this.touchWallNode.position.y - this.unit * 4.5 + this.wallNodeWidth * 0.25) / (this.unit * 5);\n        }\n        x = Math.round(x);\n        y = Math.round(y);\n        if (x == -0) {\n            x = 0;\n        }\n        if (y == -0) {\n            y = 0;\n        }\n\n        if (x < 0 || x > 7 || y < 0 || y > 7) {\n            this.touchWallShadowNode.active = false;\n            this.touchWallPosition.x = -1;\n            this.touchWallPosition.y = -1;\n        } else {\n            this.touchWallShadowNode.x = x * this.unit * 5 + this.unit * 4.5;\n            this.touchWallShadowNode.y = y * this.unit * 5 + this.unit * 4.5;\n            this.touchWallShadowNode.active = true;\n            this.touchWallPosition.x = x;\n            this.touchWallPosition.y = y;\n        }\n    }\n\n    onChessTouchEnd(event) {\n        console.log(\"onChessTouchEnd\");\n\n        if (this.touchWallPosition && this.touchWallPosition.x != -1 && this.touchWallPosition.y != -1) {\n            this.moveWallCallback(this.touchWallPosition, this.touchWallType);\n        }\n\n        this.clearView();\n    }\n\n    onChessTouchCancel(event) {\n        console.log(\"onChessTouchCancel\");\n\n        if (this.touchWallPosition && this.touchWallPosition.x != -1 && this.touchWallPosition.y != -1) {\n            this.moveWallCallback(this.touchWallPosition, this.touchWallType);\n        }\n\n        this.clearView();\n    }\n}\n","export const ProjectConfig = {\n    PREFAB_UI_DIR: \"prefab/\",\n    AUDIO_DIR: \"audio/\",\n}\n\nexport enum WorldNotification {\n    RUN_LAUNCH = \"RUN_LAUNCH\",\n\n}\n\n// TODO 很多FAIL可以考虑用SHOW_TIPS代替\nexport enum RoomNotification {\n    ROOM_CREATE = \"ROOM_CREATE\",\n    ROOM_JOIN = \"ROOM_JOIN\",\n    ROOM_LEAVE = \"ROOM_LEAVE\",\n    ROOM_MATCH = \"ROOM_MATCH\",\n    ROOM_RETURN_CHECK = \"ROOM_RETURN_CHECK\",  // 提示是否返回当前房间\n    ROOM_RETURN_NOT_CHECK = \"ROOM_RETURN_NOT_CHECK\",  // 不需要提示\n    ROOM_UPDATE = \"ROOM_UPDATE\",\n}\n\nexport enum GameNotification {\n    GAME_START = \"GAME_START\",\n    GAME_UPDATE = \"GAME_UPDATE\",\n}\n\nexport enum GameAction {\n    MOVE_CHESS = 0,\n    ADD_WALL,\n    LEAVE,\n    GIVEUP,\n}\n\nexport enum PlayerStatus {\n    DEFAULT,\n    LEAVE,\n    OFFLINE,\n    GIVEUP,\n}\n\nexport enum RoomStatus {\n    DEFAULT = 0,\n    MATCH_ING,\n    MATCH_WILL,\n    MATCH_SUCC,\n    TEAM,\n    GAME_ING,\n    GAME_END,\n}\n\nexport enum GameStatus {\n    DEFAULT,\n    END,\n}\n\nexport enum GameType {\n    TEAM2 = \"team2\",\n    MATCH2 = \"match2\",\n    MACHINE2 = \"machine2\",\n    TEAM4 = \"team4\",\n    MATCH4 = \"match4\",\n    MACHINE4 = \"machine4\",\n}\n\nexport enum WallType {\n    HORIZONTAL = \"horizontal\",\n    VERTICAL = \"vertical\",\n}\n\nexport enum Scene {\n    WELCOME = \"welcome\",\n    MENU = \"menu\",\n    ROOM = \"room\",\n    GAME = \"game\",\n}\n\nexport enum ChessboardLimit {\n    CHESS_LIMIT = 9, // 棋子格局大小限制为9\n    WALL_LIMIT = 8, // 墙体格局大小限制为棋子格局减1\n}\n\nexport const Config = {\n    WXCloudEnvID: \"dev-620e72\", // 开发环境ID\n\n    MGOBEGameId: \"obg-fqdy9jzs\", // 替换为控制台上的“游戏ID”\n    MGOBESecretKey: 'edb151a57fbbbd59f1c81399d8a5773aa40aee21',// 替换为控制台上的“游戏key”\n    MGOBEHost: 'fqdy9jzs.wxlagame.com',\n\n    reconnectMaxTimes: 5,      // 最大重试次数\n    reconnectInterval: 1000,   // 重试间隔\n    resendInterval: 1000,      // 重发间隔\n    resendTimeout: 10000,      // 重发超时时间\n    isDebug: false,            // 是否debug模式\n    matchCode1v1: \"match-m7bq0udn\",\n    matchCode1v1v1v1: \"match-kc5sm7tx\",\n\n}","import { IPlatform } from \"./IPlatform\";\nimport { wxApi } from \"../../library/wechat/wxApi\";\nimport AppFacade from \"../../AppFacade\";\nimport RoomProxy from \"../../model/RoomProxy\";\n\nexport default class DevPlatform implements IPlatform {\n\n    static mockOpenId = ((): string => {\n        let str = Date.now().toString(36);\n\n        for (let i = 0; i < 7; i++) {\n            str += Math.ceil(Math.random() * (10 ** 4)).toString(36);\n        }\n        console.log(\"随机OpenId\", str.substr(str.length-10));\n        return str.substr(str.length-10);\n    })();\n\n    async getOpenID() {\n        return DevPlatform.mockOpenId;\n    }\n\n    async authSettingOfUserInfo() {\n        return true;\n    }\n\n    async createUserInfoButton() {\n\n    }\n\n    async getUserInfo() {\n        return {\n            avatarUrl: \"https://blog.shiyicode.com/image/avatar.png\",\n            nickName: DevPlatform.mockOpenId,\n            gender: 1,\n            language: \"zh_CN\",\n            city: \"海淀\",\n            province: \"北京\",\n            country: \"中国\",\n        };\n    }\n\n    async shareAppMessage(title: string, imageUrl: string, imageUrlId: string, query: string) {\n        console.log(\"share app message:\", query);\n    }\n\n    async getLaunchOption() {\n\n    }\n\n    getLaunchOptionOnShow(callback: (query: any, scene: any) => any) {\n    }\n\n    showLoading(title: string = \"\", isMask: boolean = false) {\n        console.log(\"展示Loading\", title, isMask);\n    }\n\n    hideLoading() {\n        console.log(\"隐藏Loading\");\n    }\n\n    showToast(title: string, duration: any = 1000) {\n        console.log(\"展示toast\", title, duration);\n    }\n\n    hideToast() {\n        console.log(\"隐藏Toast\");\n    }\n\n    showModal(title:string, callback: (isConfirm: boolean) => any, content?:string, showCancel?:any, confirmText?: any,\n    cancelText?: any) {\n        console.log(\"展示Modal\", title);\n        callback && callback(true);\n    }\n\n    hideModal() {\n\n    }\n}","// import GameCommand from \"../model/GameCommand\";\nimport { GameNotification, GameType, ChessboardLimit, WallType } from \"../Constants\";\nimport { GameVO, WallVO, Position } from \"../model/vo/GameVO\";\nimport RoomProxy from \"../model/RoomProxy\";\nimport GameProxy from \"../model/GameProxy\";\nimport Util from \"../util/Util\";\n// import { Platform } from \"../services/platform/IPlatform\";\n\nexport enum WallLegalType {\n    RIGHT,\n    NOT_HAVE,\n    OVER_LAP,\n    SEAL,\n}\n\nexport default class GameCommand extends puremvc.SimpleCommand implements puremvc.ICommand {\n\n    public constructor() {\n        super();\n    }\n\n    public static NAME: string = 'GameCommand';\n\n    /**\n     * 注册消息\n     */\n    public register(): void {\n        // this.facade.registerCommand(GameNotification.TEST_GAME, GameCommand);  //注册移动的消息\n    }\n\n    public execute(notification: puremvc.INotification): void {\n        // const { gameType } = notification.getBody();\n        switch (notification.getName()) {\n            // case GameNotification.TEST_GAME: {\n            // }\n        }\n    }\n\n    /**\n     * @desc 判断用户是否结束(针对该用户视角的坐标)\n     * @param playerID 需要判断的用户 ID\n     * @param pos 用户坐标\n     * @return boolean 用户是否结束\n     */\n    isUserEnd(playerID: string, pos: Position): boolean {\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let gameInfo = gameProxy.getGame();\n\n        let rotationPos = this.rotationChess(playerID, gameInfo.playersInfo[0].playerID, pos);\n\n        return rotationPos.y == ChessboardLimit.CHESS_LIMIT - 1;\n    }\n\n    isWallLegal(wallInfo: WallVO, playerID: string) {\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let gameInfo = gameProxy.getGame();\n\n        let playerCount = Util.getPlayerCntByType(gameInfo.gameType);\n        for (let i = 0; i < playerCount; i++) {\n            if (playerID == gameInfo.playersInfo[i].playerID && gameInfo.playersInfo[i].wallLeftCnt <= 0) {\n                return WallLegalType.NOT_HAVE;\n            }\n        }\n\n        if (!this._isWallLegal(wallInfo, gameInfo.walls)) {\n            return WallLegalType.OVER_LAP;\n        }\n\n        let playersPos = new Array<Position>();\n        for (let i = 0; i < playerCount; i++) {\n            playersPos.push(new Position(gameInfo.playersInfo[i].chessPosition.x, gameInfo.playersInfo[i].chessPosition.y));\n        }\n\n        if (this._isWallSeal(wallInfo, gameInfo.walls, playersPos, playerCount)) {\n            return WallLegalType.SEAL;\n        }\n\n        return WallLegalType.RIGHT;\n    }\n\n    /**\n     * @desc 判断墙是否合法\n     * @param wallInfo  墙体信息\n     * @return boolean\n     */\n    _isWallLegal(wallInfo: WallVO, walls: Array<WallVO>): boolean {\n        if (wallInfo.position.x < 0 || wallInfo.position.x >= ChessboardLimit.WALL_LIMIT\n            || wallInfo.position.y < 0 || wallInfo.position.y >= ChessboardLimit.WALL_LIMIT\n        ) {\n            return false;\n        }\n\n        for (let i = 0; i < walls.length; i++) {\n            if (walls[i].position.x == wallInfo.position.x\n                && walls[i].position.y == wallInfo.position.y\n            ) {\n                return false;\n            }\n            if (wallInfo.wallType == WallType.HORIZONTAL && walls[i].wallType == WallType.HORIZONTAL) {\n                if (walls[i].position.y == wallInfo.position.y\n                    && ((walls[i].position.x + 1 == wallInfo.position.x\n                        || walls[i].position.x - 1 == wallInfo.position.x))\n                ) {\n                    return false;\n                }\n            }\n            if (wallInfo.wallType == WallType.VERTICAL && walls[i].wallType == WallType.VERTICAL) {\n                if (walls[i].position.x == wallInfo.position.x\n                    && ((walls[i].position.y + 1 == wallInfo.position.y\n                        || walls[i].position.y - 1 == wallInfo.position.y))\n                ) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @desc 判断墙是否会封死棋子的所有位置\n     * @param wallInfo  需要判断的新增墙体信息\n     * @param walls 游戏现有所有墙体的集合\n     * @param playersPos 当前游戏用户的所有位置信息，index 保持与游戏相同\n     * @param playerCount 玩家总数量\n     * @return boolean\n     */\n    _isWallSeal(wallInfo: WallVO, walls: Array<WallVO>, playersPos: Array<Position>, playerCount: number): boolean {\n        let newWalls = new Array<WallVO>();\n        walls.forEach(wall => {\n            newWalls.push(wall);\n        });\n        newWalls.push(wallInfo);\n\n        for (let i = 0; i < playerCount; i++) {\n            if (!this._isChessCanEnd(i, playersPos, newWalls, playerCount)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @desc 判断某一棋子是否可走至终点\n     * @param playerIndex 现在判断 bfs 的用户index\n     * @param playersPos 当前游戏用户的所有位置信息，index 保持与游戏相同\n     * @param walls 游戏现有所有墙体的集合\n     * @param playerCount 玩家总数量\n     * @return boolean\n     */\n    _isChessCanEnd(playerIndex: number, playersPos: Array<Position>, walls: Array<WallVO>, playerCount: number): boolean {\n        let firstPosition = new Position(playersPos[playerIndex].x, playersPos[playerIndex].y);\n        let otherPlayerPos = new Array<Position>();\n        for (let i = 0; i < playerCount; i++) {\n            if (i !== playerIndex) {\n                otherPlayerPos.push(new Position(playersPos[i].x, playersPos[i].y));\n            }\n        }\n\n        let queue = new Array<Position>();\n        queue.push(firstPosition);\n\n        for (let i = 0; i < queue.length; i++) {\n            let nowPosition = queue[i];\n\n            let positions = this._getAllLocation(nowPosition, otherPlayerPos, walls);\n            for (let j = 0; j < positions.length; j++) {\n                if (this._isUserEndForZero(playerIndex, positions[j], playerCount)) {\n                    return true;\n                }\n                if (!this._isInQueue(positions[j], queue)) {\n                    queue.push(positions[j]);\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    _isInQueue(position: Position, positions: Array<Position>): boolean {\n        for (let i = 0; i < positions.length; i++) {\n            if (positions[i].x == position.x && positions[i].y == position.y) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @desc 判断用户是否结束(针对0号玩家视角的坐标)\n     * @param playerIndex 判断是否结束的玩家相对于0号玩家的位置\n     * @param pos 需要判断的用户坐标用户坐标\n     * @param playerCount 玩家总数量\n     * @return boolean 该用户是否结束\n     */\n    _isUserEndForZero(playerIndex: number, pos: Position, playerCount: number): boolean {\n        let rotationMul = 2;\n        if (playerCount == 4) {\n            rotationMul = 1;\n        }\n\n        let rotationCnt = rotationMul * (0 - playerIndex);\n        let fromPlayerIndexPos = this._rotationPosition(pos, ChessboardLimit.CHESS_LIMIT - 1, ChessboardLimit.CHESS_LIMIT - 1, rotationCnt);\n\n        return fromPlayerIndexPos.y == ChessboardLimit.CHESS_LIMIT - 1;\n    }\n\n\n    /**\n     * @desc 获取用户可走的位置(对外接口)\n     * @param playerID 用户唯一标识\n     * @param pos 获取可走位置的坐标\n     * @return legalCoordinate\n     */\n    getAllLocation(playerID: string, pos: Position): Array<Position> {\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let gameInfo = gameProxy.getGame();\n\n        let playerCount = Util.getPlayerCntByType(gameInfo.gameType);\n\n        let playerIndex = 0;\n        let otherPlayerPos = new Array<Position>();\n        // 获取playerID对应用户信息的下标\n        for (let i = 0; i < playerCount; i++) {\n            if (gameInfo.playersInfo[i].playerID == playerID) {\n                playerIndex = i;\n            } else {\n                otherPlayerPos.push(gameInfo.playersInfo[i].chessPosition);\n            }\n        }\n\n        return this._getAllLocation(pos, otherPlayerPos, gameInfo.walls);\n    }\n\n    /**\n     * @desc 获取用户可走的位置(内部接口)\n     * @param pos 获取可走位置的坐标\n     * @param\n     * @return WallVO\n     */\n    _getAllLocation(pos: Position, otherPlayerPos: Array<Position>, walls: Array<WallVO>): Array<Position> {\n        let arrivalMap = this._initWallMap(walls);\n\n        let legalCoordinate = new Array<Position>();\n        // {0，1，2，3}对应{向上，向下，向左，向右}\n        for (let directions = 0; directions < 4; directions++) {\n            let nowCheckPos = new Position();\n            nowCheckPos.x = pos.x;\n            nowCheckPos.y = pos.y;\n            let locations = this._checkDirection(directions, arrivalMap, otherPlayerPos, nowCheckPos);\n            for (let i = 0; i < locations.length; i++) {\n                legalCoordinate.push(locations[i]);\n            }\n        }\n\n        return legalCoordinate;\n    }\n\n    /**\n     * @desc 获取一个方向的可走坐标， {0，1，2，3}对应{向上，向下，向左，向右}\n     * @param directionType {0，1，2，3}对应{向上，向下，向左，向右}\n     * @param arrivalMap 墙对应方向是否可走的 map\n     * @param otherPlayerPos 其他用户棋子的坐标\n     * @param nowPos 当前判断时的坐标\n     * @return arrivalMap\n     */\n    _checkDirection(directionType: number, arrivalMap: Array<Array<Array<boolean>>>, otherPlayerPos: Array<Position>, nowPos: Position): Array<Position> {\n        let legalCoordinate = new Array<Position>();\n        let judgePos = this._getJudgePos(directionType, nowPos);\n\n        if (this._isTransboundary(judgePos)) {\n            return legalCoordinate;\n        }\n\n        // 选择走子的方向不存在墙\n        if (arrivalMap[nowPos.x][nowPos.y][directionType]) {\n            // 有对方棋子\n            if (this._isLocHasPiece(judgePos, otherPlayerPos)) {\n                // 该位置不可放，尝试跳过该棋子且走向相同方向的下一个位置\n                nowPos.x = judgePos.x;\n                nowPos.y = judgePos.y;\n                judgePos = this._getJudgePos(directionType, nowPos);\n\n                // 如果该方向未越界且无墙则直接可落子\n                if (!this._isTransboundary(judgePos) && arrivalMap[nowPos.x][nowPos.y][directionType]) {\n                    // 不存在棋子且未越界\n                    if (!this._isLocHasPiece(judgePos, otherPlayerPos)) {\n                        legalCoordinate.push(judgePos);\n                    }\n                } else {\n                    if (directionType == 0 || directionType == 1) {\n                        // 判断左右\n                        if (arrivalMap[nowPos.x][nowPos.y][2]) {\n                            // 判断左\n                            let leftPos = new Position(nowPos.x - 1, nowPos.y);\n                            if (!this._isTransboundary(leftPos) && !this._isLocHasPiece(leftPos, otherPlayerPos)) {\n                                legalCoordinate.push(leftPos);\n                            }\n                        }\n                        if (arrivalMap[nowPos.x][nowPos.y][3]) {\n                            // 判断右\n                            let rightPos = new Position(nowPos.x + 1, nowPos.y);\n                            if (!this._isTransboundary(rightPos) && !this._isLocHasPiece(rightPos, otherPlayerPos)) {\n                                legalCoordinate.push(rightPos);\n                            }\n                        }\n                    } else {\n                        // 判断上下\n                        if (arrivalMap[nowPos.x][nowPos.y][0]) {\n                            // 判断上\n                            let upPos = new Position(nowPos.x, nowPos.y + 1);\n                            if (!this._isTransboundary(upPos) && !this._isLocHasPiece(upPos, otherPlayerPos)) {\n                                legalCoordinate.push(upPos);\n                            }\n                        }\n                        if (arrivalMap[nowPos.x][nowPos.y][1]) {\n                            // 判断下\n                            let downPos = new Position(nowPos.x, nowPos.y - 1);\n                            if (!this._isTransboundary(downPos) && !this._isLocHasPiece(downPos, otherPlayerPos)) {\n                                legalCoordinate.push(downPos);\n                            }\n                        }\n                    }\n                }\n\n            } else {\n                legalCoordinate.push(judgePos);\n            }\n        }\n\n        return legalCoordinate;\n    }\n\n\n    /**\n     * @desc 获取指定方向走一步的坐标\n     * @param directionType {0，1，2，3}对应{向上，向下，向左，向右}\n     * @param nowPos 当前判断时的坐标\n     * @return boolean\n     */\n    _getJudgePos(directionType: number, nowPos: Position): Position {\n        let judgePos = new Position();\n        switch (directionType) {\n            case 0:\n                judgePos.x = nowPos.x;\n                judgePos.y = nowPos.y + 1;\n                break;\n            case 1:\n                judgePos.x = nowPos.x;\n                judgePos.y = nowPos.y - 1;\n                break;\n            case 2:\n                judgePos.x = nowPos.x - 1;\n                judgePos.y = nowPos.y;\n                break;\n            case 3:\n                judgePos.x = nowPos.x + 1;\n                judgePos.y = nowPos.y;\n                break;\n        }\n        return judgePos;\n    }\n\n    /**\n     * @desc 判断棋子是否越界\n     * @param pos 当前需要判断的位置\n     * @return boolean\n     */\n    _isTransboundary(pos: Position): boolean {\n        if (pos.x < 0 || pos.x >= ChessboardLimit.CHESS_LIMIT\n            || pos.y < 0 || pos.y >= ChessboardLimit.CHESS_LIMIT\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @desc 判断位置是否存在棋子\n     * @param pos 当前需要判断的位置\n     * @param otherPlayerPos  其他用户的棋子位置\n     * @return boolean\n     */\n    _isLocHasPiece(pos: Position, otherPlayerPos: Array<Position>): boolean {\n        for (let i = 0; i < otherPlayerPos.length; i++) {\n            if (pos.x == otherPlayerPos[i].x && pos.y == otherPlayerPos[i].y) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * @desc 获取墙对应方向是否可走的 map， {0，1，2，3}对应{向上，向下，向左，向右}\n     * @param walls 现有墙的信息\n     * @return arrivalMap\n     */\n    _initWallMap(walls: Array<WallVO>): Array<Array<Array<boolean>>> {\n        let arrivalMap = new Array<Array<Array<boolean>>>();\n        for (let i = 0; i < ChessboardLimit.CHESS_LIMIT; i++) {\n            let arrival = new Array<Array<boolean>>();\n            for (let j = 0; j < ChessboardLimit.CHESS_LIMIT; j++) {\n                let arr = new Array<boolean>();\n                //可以向上\n                if (j >= 0 && j < ChessboardLimit.CHESS_LIMIT - 1) {\n                    arr[0] = true\n                }\n                //可以向下\n                if (j > 0 && j <= ChessboardLimit.CHESS_LIMIT - 1) {\n                    arr[1] = true\n                }\n                //可以向左\n                if (i > 0 && i <= ChessboardLimit.CHESS_LIMIT - 1) {\n                    arr[2] = true\n                }\n                //可以向右\n                if (i >= 0 && i < ChessboardLimit.CHESS_LIMIT - 1) {\n                    arr[3] = true\n                }\n                arrival[j] = arr;\n            }\n            arrivalMap[i] = arrival;\n        }\n\n        for (let i = 0; i < walls.length; i++) {\n            //横木板\n            if (walls[i].wallType == \"horizontal\") {\n                arrivalMap[walls[i].position.x][walls[i].position.y][0] = false\n                arrivalMap[walls[i].position.x + 1][walls[i].position.y][0] = false\n                arrivalMap[walls[i].position.x][walls[i].position.y + 1][1] = false\n                arrivalMap[walls[i].position.x + 1][walls[i].position.y + 1][1] = false\n            }\n            //纵木板\n            if (walls[i].wallType == \"vertical\") {\n                arrivalMap[walls[i].position.x + 1][walls[i].position.y][2] = false\n                arrivalMap[walls[i].position.x + 1][walls[i].position.y + 1][2] = false\n                arrivalMap[walls[i].position.x][walls[i].position.y][3] = false\n                arrivalMap[walls[i].position.x][walls[i].position.y + 1][3] = false\n            }\n        }\n\n        return arrivalMap;\n    }\n\n    /**\n     * @desc 墙体坐标转换(视角转换由 from => to)\n     * @param fromPlayerID 用户唯一标识\n     * @param toPlayerID 用户唯一标识\n     * @param wallInfo  墙体信息\n     * @return WallVO\n     */\n    rotationWall(fromPlayerID: string, toPlayerID: string, wallInfo: WallVO): WallVO {\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let gameInfo = gameProxy.getGame();\n        let playerCount = Util.getPlayerCntByType(gameInfo.gameType);\n        let rotationMul = 2;\n        if (playerCount == 4) {\n            // 4人游戏中，如果需要转换，每隔一个用户需要转换1次，所以最终转换次数要乘1\n            rotationMul = 1;\n        }\n\n        let fromPlayerIndex = 0;\n        let toPlayerIndex = 0;\n        // 获取playerID对应用户信息的下标\n        for (let i = 0; i < playerCount; i++) {\n            if (gameInfo.playersInfo[i].playerID == fromPlayerID) {\n                fromPlayerIndex = i;\n            }\n            if (gameInfo.playersInfo[i].playerID == toPlayerID) {\n                toPlayerIndex = i;\n            }\n        }\n\n        let rotationCnt = rotationMul * (toPlayerIndex - fromPlayerIndex);\n        let position = this._rotationPosition(wallInfo.position, ChessboardLimit.WALL_LIMIT - 1, ChessboardLimit.WALL_LIMIT - 1, rotationCnt);\n\n        let wallType = wallInfo.wallType;\n        if ((rotationCnt) % 2 != 0) {\n            if (wallType == WallType.HORIZONTAL) {\n                wallType = WallType.VERTICAL;\n            } else if (wallType == WallType.VERTICAL) {\n                wallType = WallType.HORIZONTAL;\n            }\n        }\n\n        return new WallVO(wallType, position);\n    }\n\n    /**\n     * @desc 棋子坐标转换(视角转换由 from => to)\n     * @param fromPlayerID 用户唯一标识\n     * @param toPlayerID 用户唯一标识\n     * @param chessInfo  棋子坐标信息\n     * @return Position\n     */\n    rotationChess(fromPlayerID: string, toPlayerID: string, chessInfo: Position): Position {\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let gameInfo = gameProxy.getGame();\n        let playerCount = Util.getPlayerCntByType(gameInfo.gameType);\n        let rotationMul = 2;\n        if (playerCount == 4) {\n            // 4人游戏中，如果需要转换，每隔一个用户需要转换1次，所以最终转换次数要乘1\n            rotationMul = 1;\n        }\n\n        let fromPlayerIndex = 0;\n        let toPlayerIndex = 0;\n        // 获取playerID对应用户信息的下标\n        for (let i = 0; i < playerCount; i++) {\n            if (gameInfo.playersInfo[i].playerID == fromPlayerID) {\n                fromPlayerIndex = i;\n            }\n            if (gameInfo.playersInfo[i].playerID == toPlayerID) {\n                toPlayerIndex = i;\n            }\n        }\n\n        let rotationCnt = rotationMul * (toPlayerIndex - fromPlayerIndex);\n        return this._rotationPosition(chessInfo, ChessboardLimit.CHESS_LIMIT - 1, ChessboardLimit.CHESS_LIMIT - 1, rotationCnt);\n    }\n\n\n    /**\n     * @desc Position坐标转换\n     * @param pos 需要转换的初始坐标\n     * @param width  棋盘宽度(因为坐标以0为起始，所以初始调用时需使用正常宽度-1)\n     * @param height 棋盘高度(同宽度)\n     * @param rotationCnt 需要转换的次数，正数代表顺时针转换次数，负数代表逆时针转换次数，每次转换为90°\n     * @return Position\n     */\n    _rotationPosition(pos: Position, width: number, height: number, rotationCnt: number): Position {\n        let resultPos = new Position();\n        if (rotationCnt > 0) {\n            resultPos.x = height - pos.y;\n            resultPos.y = pos.x;\n            resultPos = this._rotationPosition(resultPos, height, width, rotationCnt - 1);\n        } else if (rotationCnt < 0) {\n            resultPos.x = pos.y;\n            resultPos.y = width - pos.x;\n            resultPos = this._rotationPosition(resultPos, height, width, rotationCnt + 1);\n        } else {\n            resultPos.x = pos.x;\n            resultPos.y = pos.y;\n        }\n        return resultPos;\n    }\n}","import { RoomVO } from \"./vo/RoomVO\";\nimport { WallType, PlayerStatus, GameStatus, RoomStatus } from \"../Constants\";\nimport Util from \"../util/Util\";\nimport { GameVO, PlayerVO, Position, WallVO } from \"./vo/GameVO\";\n\nimport RoomProxy from \"./RoomProxy\";\n// 直接使用 MGOBE\n\nexport default class GameProxy extends puremvc.Proxy implements puremvc.IProxy {\n    public static NAME: string = \"GameProxy\";\n    private static instance: GameProxy = null;\n    private game: GameVO = null;\n    // 帧广播消息缓存\n    private frames: MGOBE.types.Frame[] = [];\n\n    public static getInstance() {\n        if (!this.instance) {\n            this.instance = new GameProxy();\n        }\n        return this.instance;\n    }\n\n    public constructor() {\n        super(GameProxy.NAME);\n        this.game = new GameVO();\n    }\n\n    public getGame() {\n        return this.game;\n    }\n\n    public getFrames() {\n        return this.frames;\n    }\n\n    public pushFrame(frame: MGOBE.types.Frame) {\n        this.frames.push(frame);\n    }\n\n    public clearFrame() {\n        this.frames = [];\n    }\n\n    public addWall(playerId, position: Position, wallType: WallType) {\n        let playerMaxNum = Util.getPlayerCntByType(this.game.gameType);\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (this.game.playersInfo[i].playerID == playerId) {\n                this.game.playersInfo[i].wallLeftCnt--;\n            }\n        }\n        this.game.walls.push(new WallVO(wallType, position));\n    }\n\n    public moveChess(playerId, position: Position) {\n        let playerMaxNum = Util.getPlayerCntByType(this.game.gameType);\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (this.game.playersInfo[i].playerID == playerId) {\n                this.game.playersInfo[i].chessPosition = position;\n            }\n        }\n    }\n\n    public checkEnd() {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n\n        let playerMaxNum = Util.getPlayerCntByType(this.game.gameType);\n        // 只要有一个到达，就算结束\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (this.game.playersInfo[i].result != 0) {\n                this.game.status = GameStatus.END;\n                roomProxy.setRoomStatus(RoomStatus.GAME_END);\n                this.game.nowPlayerID = \"\";\n                return;\n            }\n        }\n\n        let onlineNum = 0;\n        let player: PlayerVO;\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (this.game.playersInfo[i].status == PlayerStatus.DEFAULT\n                || this.game.playersInfo[i].status == PlayerStatus.OFFLINE) {\n                onlineNum++;\n                player = this.game.playersInfo[i];\n            }\n        }\n        if (onlineNum <= 1) {\n            this.game.status = GameStatus.END;\n            roomProxy.setRoomStatus(RoomStatus.GAME_END);\n            this.game.nowPlayerID = \"\";\n            player.result = 1;\n        }\n    }\n\n    public changeNowPlayer(time: number) {\n        console.log(\"切换玩家\");\n        if (this.game.nowPlayerID == \"\") {\n            return;\n        }\n        let playerMaxNum = Util.getPlayerCntByType(this.game.gameType);\n        let idx = 0;\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (this.game.nowPlayerID == this.game.playersInfo[i].playerID) {\n                idx = i;\n            }\n        }\n\n        for (let i = 1; i < playerMaxNum; i++) {\n            let newIdx = (idx + i) % playerMaxNum;\n            if (this.game.playersInfo[newIdx].result == 0\n                && (this.game.playersInfo[newIdx].status == PlayerStatus.DEFAULT\n                    || this.game.playersInfo[newIdx].status == PlayerStatus.OFFLINE)\n                && this.game.status != GameStatus.END) {\n                this.game.nowPlayerID = this.game.playersInfo[newIdx].playerID;\n                this.game.nowActionStartTime = time;\n                break;\n            }\n        }\n    }\n\n    public setPlayerResult(playerId: string, result: number) {\n        this.game.playersInfo.forEach((player) => {\n            if (player.playerID == playerId) {\n                player.result = result;\n            }\n        });\n    }\n\n    public getMaxPlayerResult(): number {\n        let maxResult = 0;\n        this.game.playersInfo.forEach((player) => {\n            maxResult = Math.max(maxResult, player.result);\n        });\n        return maxResult;\n    }\n\n    public setPlayerStatus(playerId: string, status) {\n        this.game.playersInfo.forEach((player) => {\n            if (player.playerID == playerId) {\n                player.status = status;\n            }\n        });\n    }\n\n    public createGame(room: RoomVO) {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        roomProxy.setRoomStatus(RoomStatus.GAME_ING);\n\n        let playerMaxNum = Util.getPlayerCntByType(room.gameType);\n\n        this.game = new GameVO();\n        this.game.walls = [];\n        this.game.gameType = room.gameType;\n        this.game.mePlayerIdx = room.mePlayerIdx;\n\n        let firstPlayerIdx = (playerMaxNum - room.mePlayerIdx) % playerMaxNum;\n        this.game.nowPlayerID = room.playersInfo[firstPlayerIdx].playerID;\n\n        this.game.nowActionStartTime = Date.parse(new Date().toString());\n        this.game.maxActionDuration = 30;\n\n        let positions = [];\n        if (playerMaxNum == 2) {\n            positions = [\n                new Position(4, 0),\n                new Position(4, 8),\n            ];\n        } else {\n            positions = [\n                new Position(4, 0),\n                new Position(0, 4),\n                new Position(4, 8),\n                new Position(8, 4),\n            ];\n        }\n\n        for (let i = 0; i < playerMaxNum; i++) {\n            let gamePlayer = this.game.playersInfo[i];\n            let roomPlayer = room.playersInfo[i];\n            // TODO 临时，人数足够时不会有这个错\n            if (roomPlayer) {\n\n                gamePlayer.avatarUrl = roomPlayer.avatarUrl;\n                gamePlayer.nickName = roomPlayer.nickName;\n                gamePlayer.playerID = roomPlayer.playerID;\n                gamePlayer.wallLeftCnt = playerMaxNum == 2 ? 10 : 5;\n                gamePlayer.chessPosition = positions[i];\n                gamePlayer.status = PlayerStatus.DEFAULT;\n            }\n        }\n        console.log(\"游戏创建\", this.game);\n    }\n}","import { WallType, GameType } from \"../../Constants\";\nimport Util from \"../../util/Util\";\n\nexport class GameVO {\n    gameType: GameType; // 游戏模式\n    nowPlayerID: string; // 当前流程游戏玩家\n    nowActionStartTime: number; // 当前玩家操作开始时间\n    maxActionDuration: number; // 当前玩家操作时间长度\n    mePlayerIdx: number;\n    walls: Array<WallVO>;\n    playersInfo: Array<PlayerVO>;\n    status: number;\n\n    public constructor() {\n        this.nowPlayerID = \"\";\n\n        this.walls = new Array<WallVO>();\n        this.playersInfo = new Array<PlayerVO>();\n\n        for(let i=0; i<4; i++) {\n            this.playersInfo.push(new PlayerVO());\n        }\n    }\n}\n\nexport class PlayerVO {\n    playerID: string = \"\";\n    isReady: boolean = false;\n    chessPosition: Position;\n    wallLeftCnt: number;\n    avatarUrl: string = \"\";\n    nickName: string = \"\";\n    status: number = 0;\n    result: number = 0; // 游戏结果\n    value: number = 0;  // TODO 玩家分数，暂时摆设\n    public constructor() {\n        this.chessPosition = new Position();\n    }\n}\n\nexport class WallVO {\n    position: Position;\n    wallType: WallType;\n    public constructor(wallType: WallType, position: Position) {\n        this.position = position;\n        this.wallType = wallType;\n    }\n}\n\nexport class Position {\n    x : number;\n    y : number;\n    public constructor(x: number=0, y: number=0) {\n        this.x = x;\n        this.y = y;\n    }\n}","import UserProxy from \"../model/UserProxy\";\nimport GameView from \"../view/component/GameView\";\nimport { Position, WallVO } from \"../model/vo/GameVO\";\nimport { WallType, GameNotification, GameAction, PlayerStatus, GameStatus, RoomStatus } from \"../Constants\";\nimport GameProxy from \"../model/GameProxy\";\nimport MgobeService from \"../services/mgobe/MgobeService\";\nimport RoomProxy from \"../model/RoomProxy\";\nimport { Platform } from \"../services/platform/IPlatform\";\nimport Util from \"../util/Util\";\nimport GameCommand, { WallLegalType } from \"../controller/GameCommand\";\nimport { UIManager } from \"../manager/UIManager\";\nimport MenuView from \"./component/MenuView\";\nimport { HelpView } from \"./component/HelpView\";\nimport ChessBoard from \"./component/Chessboard\";\nimport RoomView from \"./component/RoomView\";\nimport { AudioManager } from \"../manager/AudioManager\";\n\nexport default class GameViewMediator extends puremvc.Mediator implements puremvc.IMediator {\n    public static NAME: string = \"GameViewMediator\";\n\n    public constructor(viewComponent: any) {\n        super(GameViewMediator.NAME, viewComponent);\n    }\n\n    public listNotificationInterests(): string[] {\n        return [\n            GameNotification.GAME_UPDATE,\n        ];\n    }\n\n    public handleNotification(notification: puremvc.INotification): void {\n        const viewComponent = this.viewComponent as GameView;\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n\n        const data = notification.getBody();\n        switch (notification.getName()) {\n            case GameNotification.GAME_UPDATE: {\n                let game = gameProxy.getGame();\n                viewComponent.updateView(game);\n                break;\n            }\n        }\n    }\n\n    public onRegister(): void {\n        // 启动帧同步\n        MgobeService.startFrameSync((event) => {\n            if (event.code == MGOBE.ErrCode.EC_OK) {\n                console.log(\"启动帧同步成功\");\n            } else {\n                console.log(\"启动帧同步失败\");\n            }\n        });\n        this.listenGame();\n\n        this.initView();\n\n        this.initCallback();\n    }\n\n    public onRemove(): void {\n        // 关闭帧同步\n        MgobeService.stopFrameSync((event) => {\n            if (event.code == MGOBE.ErrCode.EC_OK) {\n                console.log(\"关闭帧同步成功\");\n            } else {\n                console.log(\"关闭帧同步失败\");\n            }\n        });\n        this.removeListenGame();\n    }\n\n    public initView() {\n        const viewComponent = this.viewComponent as GameView;\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n\n        // 清理准备状态，避免返回房间场景后又重复进入游戏场景\n        this.clearReadyState();\n\n        let room = roomProxy.getRoom();\n        gameProxy.createGame(room);\n\n        // 获取房间信息，初始化界面\n        let game = gameProxy.getGame();\n        if (game.status == GameStatus.END) {\n            UIManager.getInstance().showTip(\"游戏已结束!\");\n            UIManager.getInstance().showUI(MenuView);\n            UIManager.getInstance().closeUI(GameView);\n            return;\n        }\n        viewComponent.updateView(game);\n        console.log(\"初始化游戏界面\", game);\n    }\n\n    public initCallback() {\n        const viewComponent = this.viewComponent as GameView;\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        let chessBoardVC = viewComponent.chessBoardLayer.getComponent(ChessBoard) as ChessBoard;\n\n        viewComponent.menuButton.on(\"click\", () => {\n            AudioManager.getInstance().playSound(\"touch\");\n\n            viewComponent.menuNode.active = !viewComponent.menuNode.active;\n        });\n\n        viewComponent.leaveButton.on(\"click\", () => {\n            console.log(\"leave button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            viewComponent.menuNode.active = false;\n            let game = gameProxy.getGame();\n            if (game.status != GameStatus.END) {\n\n                Platform().showModal(\"提示\", (isConfirm) => {\n                    if (isConfirm) {\n                        let data = {\n                            playerId: userProxy.getPlayerId(),\n                            action: GameAction.LEAVE,\n                            time: Date.parse(new Date().toString()),\n                        };\n                        MgobeService.sendFrame(data, (event) => {\n                            if (event.code == MGOBE.ErrCode.EC_OK) {\n                                this.leaveRoom();\n                            }\n                            roomProxy.setRoomStatus(RoomStatus.DEFAULT);\n                            UIManager.getInstance().showUI(MenuView);\n                            UIManager.getInstance().closeUI(GameView);\n                        });\n                    }\n                }, \"对局尚未结束，确认离开？\", true, \"确认\", \"取消\");\n            } else {\n                roomProxy.setRoomStatus(RoomStatus.DEFAULT);\n                UIManager.getInstance().showUI(MenuView);\n                UIManager.getInstance().closeUI(GameView);\n            }\n        });\n\n        viewComponent.helpButton.on(\"click\", () => {\n            console.log(\"help button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().openUISync(HelpView, 0, () => {\n            });\n        });\n\n        viewComponent.backMenuButton.on(\"click\", () => {\n            console.log(\"back menu button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            this.leaveRoom();\n            roomProxy.setRoomStatus(RoomStatus.DEFAULT);\n            UIManager.getInstance().showUI(MenuView);\n            UIManager.getInstance().closeUI(GameView);\n        });\n\n        viewComponent.continueButton.on(\"click\", () => {\n            console.log(\"continue button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n            let game = gameProxy.getGame();\n            roomProxy.initRoom(game.gameType);\n            UIManager.getInstance().openUISync(RoomView, 0, () => {\n                UIManager.getInstance().closeUI(GameView);\n            });\n        });\n\n        viewComponent.timeoutCallback = () => {\n            console.log(\"随机走子\");\n            let game = gameProxy.getGame();\n            if (game.nowPlayerID == game.playersInfo[0].playerID) {\n                if (game.status != GameStatus.END) {\n                    let gameCommand = new GameCommand();\n                    let positions = gameCommand.getAllLocation(userProxy.getPlayerId(), game.playersInfo[0].chessPosition);\n                    let i = 0;\n                    if (positions.length > 1) {\n                        i = Util.random(0, positions.length - 1);\n                    }\n\n                    gameProxy.moveChess(userProxy.getPlayerId(), positions[i]);\n                    AudioManager.getInstance().playSound(\"chess\");\n\n                    let time = Date.parse(new Date().toString());\n                    gameProxy.changeNowPlayer(time);\n\n                    let data = {\n                        playerId: userProxy.getPlayerId(),\n                        action: GameAction.MOVE_CHESS,\n                        position: positions[i],\n                        time: time,\n                    }\n                    MgobeService.sendFrame(data);\n                    viewComponent.chessBoardLayer.getComponent(ChessBoard).clearView();\n                }\n            } else {\n                let playerCnt = Util.getPlayerCntByType(game.gameType);\n                let idx = 0;\n                for (let i = 0; i < playerCnt; i++) {\n                    if (game.nowPlayerID == game.playersInfo[i].playerID) {\n                        idx = i;\n                        break;\n                    }\n                }\n                if (game.playersInfo[idx].status == PlayerStatus.OFFLINE) {\n                    for (let i = 1; i < playerCnt; i++) {\n                        let new_idx = (idx + i) % playerCnt;\n                        if (game.playersInfo[new_idx].playerID == game.playersInfo[0].playerID\n                            && game.playersInfo[new_idx].status == PlayerStatus.DEFAULT) {\n                            console.log(\"将离线玩家置为逃跑\");\n                            gameProxy.setPlayerStatus(game.playersInfo[idx].playerID, PlayerStatus.LEAVE);\n                            let time = Date.parse(new Date().toString());\n                            gameProxy.changeNowPlayer(time);\n                            let data = {\n                                playerId: game.playersInfo[idx].playerID,\n                                action: GameAction.LEAVE,\n                                time: time,\n                            };\n                            MgobeService.sendFrame(data);\n                            this.sendNotification(GameNotification.GAME_UPDATE);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        chessBoardVC.moveWallCallback = (position: Position, wallType: WallType) => {\n            console.log(\"moveWallCallback\", position, wallType);\n            AudioManager.getInstance().playSound(\"wall\");\n\n            let gameCommand = new GameCommand();\n            let isWallLegal = gameCommand.isWallLegal(new WallVO(wallType, position), userProxy.getPlayerId());\n\n            switch (isWallLegal) {\n                case WallLegalType.RIGHT:\n                    gameProxy.addWall(userProxy.getPlayerId(), position, wallType);\n                    let time = Date.parse(new Date().toString());\n                    gameProxy.changeNowPlayer(time);\n                    this.sendNotification(GameNotification.GAME_UPDATE);\n\n                    let data = {\n                        playerId: userProxy.getPlayerId(),\n                        action: GameAction.ADD_WALL,\n                        position: position,\n                        wallType: wallType,\n                        time: time,\n                    }\n                    MgobeService.sendFrame(data);\n                    break;\n                case WallLegalType.NOT_HAVE:\n                    UIManager.getInstance().showTip(\"木板放置失败，数量不足!\");\n                    break;\n                case WallLegalType.OVER_LAP:\n                    UIManager.getInstance().showTip(\"木板放置失败，不可重叠、交叉\");\n                    break;\n                case WallLegalType.SEAL:\n                    UIManager.getInstance().showTip(\"木板放置失败，不可将任何棋子堵死!\");\n                    break;\n            }\n            viewComponent.chessBoardLayer.getComponent(ChessBoard).clearView();\n        };\n\n        chessBoardVC.moveChessCallback = (position: Position) => {\n            console.log(\"moveChessCallback\", position);\n\n            gameProxy.moveChess(userProxy.getPlayerId(), position);\n            let time = Date.parse(new Date().toString());\n            gameProxy.changeNowPlayer(time);\n            this.sendNotification(GameNotification.GAME_UPDATE);\n            AudioManager.getInstance().playSound(\"chess\");\n\n            let data = {\n                playerId: userProxy.getPlayerId(),\n                action: GameAction.MOVE_CHESS,\n                position: position,\n                time: time,\n            }\n            MgobeService.sendFrame(data);\n            viewComponent.chessBoardLayer.getComponent(ChessBoard).clearView();\n        };\n\n        chessBoardVC.getAllHintPosition = () => {\n            let game = gameProxy.getGame();\n            let gameCommand = new GameCommand();\n            let positions = gameCommand.getAllLocation(userProxy.getPlayerId(), game.playersInfo[0].chessPosition);\n\n            return positions;\n        };\n\n        // viewComponent.giveupButton.on(\"click\", () => {\n        //     console.log(\"giveup button click\");\n        //     viewComponent.menuNode.active = false;\n        //     // UIManager.getInstance().showUI(MenuView);\n        //     // UIManager.getInstance().closeUI(GameView);\n        // });\n\n        // viewComponent.giveupButtonClick = (event) => {\n        //     console.log(\"giveup button click\");\n        //     viewComponent.boxButtonNode.active = false;\n        //     let data = {\n        //         playerId: userProxy.getPlayerId(),\n        //         action: GameAction.GIVEUP,\n        //     };\n        //     MgobeService.sendFrame(data, (event) => {\n        //         if (event.code == MGOBE.ErrCode.EC_OK) {\n        //         } else {\n        //             Platform().showToast(\"请求失败，请重试\");\n        //         }\n        //     });\n        //     viewComponent.boxButtonNode.active = false;\n        //     this.sendNotification(GameNotification.GAME_UPDATE);\n        // };\n    }\n\n    listenGame() {\n        console.log(\"开启游戏监听\");\n        const viewComponent = this.viewComponent as GameView;\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n\n        MgobeService.room.onRecvFrame = (event) => {\n            // console.log(\"帧广播接收\", event);\n            this.calcFrame(event.data.frame);\n        };\n\n        // SDK 房间内消息广播\n        MgobeService.room.onRecvFromClient = (event) => {\n            console.log(\"房间消息广播接收\");\n            // this.uiChat.appendMsg(event.data.msg, event.data.sendPlayerId === MGOBE.Player.id);\n        }\n\n        MgobeService.room.onChangePlayerNetworkState = (event) => {\n            console.log(\"网络变化\", event);\n            if (event.data.networkState == MGOBE.ENUM.NetworkState.RELAY_OFFLINE) {\n                console.log(\"离线\", event);\n                let game = gameProxy.getGame();\n                if (game.nowPlayerID == event.data.changePlayerId) {\n                    game.nowActionStartTime = Date.parse(new Date().toString());\n                }\n                gameProxy.setPlayerStatus(event.data.changePlayerId, PlayerStatus.OFFLINE);\n            } else if (event.data.networkState == MGOBE.ENUM.NetworkState.RELAY_ONLINE) {\n                console.log(\"在线\", event);\n                // TODO 重置  踢出去\n                viewComponent.unscheduleAllCallbacks();\n                gameProxy.setPlayerStatus(event.data.changePlayerId, PlayerStatus.DEFAULT);\n            }\n            // gameProxy.checkEnd();\n            this.sendNotification(GameNotification.GAME_UPDATE);\n        };\n\n        MgobeService.room.onAutoRequestFrameError = (event) => {\n            console.log(\"自动补帧失败\", event.data.code);\n            // 重试\n            MgobeService.room.retryAutoRequestFrame();\n        };\n    }\n\n    removeListenGame() {\n        console.log(\"关闭游戏监听\");\n        MgobeService.room.onRecvFrame = null;\n        MgobeService.room.onRecvFromClient = null;\n        MgobeService.room.onChangePlayerNetworkState = null;\n    }\n\n    // 根据每一帧计算游戏逻辑\n    calcFrame(frame: MGOBE.types.Frame) {\n        const viewComponent = this.viewComponent as GameView;\n\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n        let gameCommand = new GameCommand();\n\n        if (frame.items && frame.items.length > 0) {\n            frame.items.forEach(item => {\n                console.log(\"收到帧消息\", item);\n                switch (item.data['action']) {\n                    case GameAction.MOVE_CHESS: {\n\n                        let position = gameCommand.rotationChess(item.data['playerId'], userProxy.getPlayerId(),\n                            item.data['position']);\n                        console.log(\"移动棋子\", position);\n                        if (userProxy.getPlayerId() != item.data['playerId']) {\n                            AudioManager.getInstance().playSound(\"chess\");\n                            gameProxy.moveChess(item.data['playerId'], position);\n                            gameProxy.changeNowPlayer(item.data['time']);\n                        }\n\n                        if (gameCommand.isUserEnd(item.data['playerId'], position)) {\n                            console.log(\"user end\", item.data['playerId']);\n                            gameProxy.setPlayerResult(item.data['playerId'], gameProxy.getMaxPlayerResult() + 1);\n                        }\n                        gameProxy.checkEnd();\n                        break;\n                    }\n                    case GameAction.ADD_WALL: {\n                        if (userProxy.getPlayerId() != item.data['playerId']) {\n                            AudioManager.getInstance().playSound(\"wall\");\n                            let wallInfo = gameCommand.rotationWall(item.data['playerId'], userProxy.getPlayerId(),\n                                new WallVO(item.data['wallType'], item.data['position']));\n                            gameProxy.addWall(item.data['playerId'], wallInfo.position, wallInfo.wallType);\n                            gameProxy.changeNowPlayer(item.data['time']);\n                        }\n                        break;\n                    }\n                    case GameAction.LEAVE: {\n                        let game = gameProxy.getGame();\n                        gameProxy.setPlayerStatus(item.data['playerId'], PlayerStatus.LEAVE);\n                        console.log(\"玩家离开\");\n                        gameProxy.checkEnd();\n                        if (item.data['playerId'] == game.nowPlayerID) {\n                            gameProxy.changeNowPlayer(item.data['time']);\n                        }\n                        break;\n                    }\n                }\n            });\n            let game = gameProxy.getGame();\n            if(game.status == GameStatus.END) {\n                this.removeListenGame();\n            }\n            gameProxy.pushFrame(frame);\n            this.sendNotification(GameNotification.GAME_UPDATE);\n        }\n    }\n\n    public leaveRoom() {\n        MgobeService.getMyRoom((event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                MgobeService.leaveRoom((event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK || event.code === MGOBE.ErrCode.EC_ROOM_PLAYER_NOT_IN_ROOM) {\n                        console.log(\"离开房间成功\", event);\n                    } else {\n                        console.log(\"离开房间失败\", event);\n                    }\n                });\n            } else {\n                console.log(\"获取房间信息失败\", event);\n            }\n        });\n    }\n\n    public clearReadyState() {\n        MgobeService.changeCustomPlayerStatus(0, (event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n            } else {\n                console.log(\"重置为未准备状态失败\");\n            }\n        });\n        console.log(\"将用户重置为未准备状态\");\n    }\n}","import AppFacade from \"../../AppFacade\";\nimport GameViewMediator from \"../GameViewMediator\";\nimport { GameVO, Position, WallVO } from \"../../model/vo/GameVO\";\nimport Util from \"../../util/Util\";\nimport { GameType, WallType, PlayerStatus, ProjectConfig, GameStatus, GameNotification } from \"../../Constants\";\nimport UserProxy from \"../../model/UserProxy\";\nimport { Platform } from \"../../services/platform/IPlatform\";\nimport { BaseUI } from \"./BaseUI\";\nimport { Player } from \"./Player\";\nimport ChessBoard from \"./Chessboard\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameView extends BaseUI {\n\n    public static NAME = \"GameView\";\n\n    static getUrl(): string {\n        return ProjectConfig.PREFAB_UI_DIR + GameView.NAME;\n    }\n\n    @property(cc.Node)\n    menuNode: cc.Node = null;\n    @property(cc.Node)\n    menuButton: cc.Node = null;\n    @property(cc.Node)\n    leaveButton: cc.Node = null;\n    @property(cc.Node)\n    giveupButton: cc.Node = null;\n    @property(cc.Node)\n    helpButton: cc.Node = null;\n    @property(cc.Node)\n    player0Node: cc.Node = null;\n    @property(cc.Node)\n    player1Node: cc.Node = null;\n    @property(cc.Node)\n    player2Node: cc.Node = null;\n    @property(cc.Node)\n    player3Node: cc.Node = null;\n    @property(cc.Node)\n    chessBoardLayer: cc.Node = null;\n    @property(cc.Node)\n    backMenuButton: cc.Node = null;\n    @property(cc.Node)\n    continueButton: cc.Node = null;\n    @property(cc.Node)\n    barNode: cc.Node = null;\n    @property(cc.Node)\n    winTitle: cc.Node = null;\n    @property(cc.Node)\n    loseTitle: cc.Node = null;\n\n    onLoad() {\n    }\n\n    start() {\n        AppFacade.getInstance().registerMediator(new GameViewMediator(this));\n    }\n\n    public onDestroy() {\n        AppFacade.getInstance().removeMediator(GameViewMediator.NAME);\n    }\n\n    updateView(game: GameVO) {\n        // 初始化用户信息节点\n        let playerNodeArray: Array<cc.Node> = [];\n        let playerCnt = Util.getPlayerCntByType(game.gameType);\n        if (playerCnt == 2) {\n            playerNodeArray.push(this.player0Node);\n            playerNodeArray.push(this.player2Node);\n            this.player1Node.active = false;\n            this.player3Node.active = false;\n        } else {\n            playerNodeArray.push(this.player0Node);\n            playerNodeArray.push(this.player1Node);\n            playerNodeArray.push(this.player2Node);\n            playerNodeArray.push(this.player3Node);\n        }\n\n        this.unscheduleAllCallbacks();\n\n        // 初始化棋盘\n        this.chessBoardLayer.getComponent(ChessBoard).updateView(game);\n\n        if (game.status == GameStatus.END) {\n            console.log(\"游戏结束\");\n            this.barNode.active = true;\n            if (game.playersInfo[0].result == 0) {\n                this.loseTitle.active = true;\n                this.winTitle.active = false;\n            } else {\n                this.loseTitle.active = false;\n                this.winTitle.active = true;\n            }\n        } else {\n            this.barNode.active = false;\n        }\n\n        // 初始化用户信息\n        for (let i = 0; i < playerCnt; i++) {\n            let player = playerNodeArray[i].getComponent(Player);\n\n            if (game.playersInfo[i] && game.playersInfo[i].playerID != \"\") {\n                player.setWallNum(game.playersInfo[i].wallLeftCnt);\n                player.setPlayer(game.playersInfo[i].nickName, game.playersInfo[i].avatarUrl);\n                player.setStatus(game.playersInfo[i].status);\n\n                // 如果是当前玩家，需要显示时间\n                if (game.status != GameStatus.END && game.nowPlayerID == game.playersInfo[i].playerID) {\n                    let callback = () => {\n                        let nowTime = Date.parse(new Date().toString());\n                        let interval = Math.ceil((nowTime - game.nowActionStartTime) / 1000);\n                        if (interval <= game.maxActionDuration) {\n                            player.setTime(true, game.maxActionDuration - interval);\n                        } else {\n                            this.unschedule(callback);\n                            this.timeoutCallback();\n                        }\n                    }\n                    this.schedule(callback, 1, cc.macro.REPEAT_FOREVER, 0);\n                } else {\n                    player.setTime(false, 0);\n                }\n            }\n        }\n    }\n\n    public timeoutCallback() { }\n}\n","import { BaseUI } from \"./BaseUI\";\nimport { Tip } from \"./Tip\";\nimport { ProjectConfig } from \"../../Constants\";\nimport { UIManager } from \"../../manager/UIManager\";\nimport { AudioManager } from \"../../manager/AudioManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class HelpView extends BaseUI {\n\n    protected static NAME = \"HelpView\";\n\n    static getUrl():string {\n        return ProjectConfig.PREFAB_UI_DIR + HelpView.NAME;\n    }\n\n    @property(cc.Node)\n    private leaveButton: cc.Node = null;\n\n    onLoad() {\n        this.leaveButton.on(\"click\", () => {\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().closeUI(HelpView);\n        })\n    }\n\n}","import WXPlatform from \"./WXPlatform\";\nimport DevPlatform from \"./DevPlatform\";\n\nexport interface IPlatform {\n    getOpenID(): Promise<any>;\n    authSettingOfUserInfo(): Promise<any>;\n    createUserInfoButton();\n    getUserInfo(): Promise<any>;\n    shareAppMessage(title: string, imageUrl: string, imageUrlId: string, query: string): Promise<any>;\n    getLaunchOption(): Promise<any>;\n    getLaunchOptionOnShow(callback: (query: any, scene: any) => any);\n    showLoading(title?: string, isMask?: boolean);\n    hideLoading();\n    showToast(title?: string, duration?: any);\n    hideToast();\n    showModal(title:string, callback: (isConfirm: boolean) => any, content?:string, showCancel?:any, confirmText?: any,\n    cancelText?: any);\n    hideModal();\n}\n\nlet platform: IPlatform;\nexport function Platform() {\n    if (platform != null) {\n        return platform;\n    }\n    switch (cc.sys.platform) {\n        case cc.sys.WECHAT_GAME:\n            platform = new WXPlatform();\n            break;\n        default:\n            platform = new DevPlatform();\n    }\n    return platform;\n}","import { BaseUI } from \"./BaseUI\";\nimport { Tip } from \"./Tip\";\nimport { ProjectConfig } from \"../../Constants\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class LoadingView extends BaseUI {\n\n    protected static NAME = \"LoadingView\";\n\n    static getUrl():string {\n        return ProjectConfig.PREFAB_UI_DIR + LoadingView.NAME;\n    }\n\n    @property(cc.Node)\n    private loadNode: cc.Node = null;\n    @property(cc.Node)\n    private maskBg: cc.Node = null;\n\n    onLoad() {\n        this.hideLoading();\n    }\n\n    showLoading(isMask: boolean = false) {\n        this.loadNode.active = true;\n        this.maskBg.active = isMask;\n    }\n\n    hideLoading() {\n        this.loadNode.active = false;\n        this.maskBg.active = false;\n    }\n\n    update(dt) {\n        if (this.loadNode.active) {\n            this.rotateLoadingFrame();\n        }\n    }\n\n    private rotateLoadingFrame() {\n        let rotationInc = 5;\n        let loadingIcon = this.loadNode.getChildByName('LoadIcon');\n        loadingIcon.angle -= rotationInc;\n    }\n}","import { GameType, WorldNotification, RoomStatus } from \"../Constants\";\nimport UserProxy from \"../model/UserProxy\";\nimport MenuView from \"../view/component/MenuView\";\nimport RoomProxy from \"../model/RoomProxy\";\nimport { Player } from \"./component/Player\";\nimport { UIManager } from \"../manager/UIManager\";\nimport { HelpView } from \"./component/HelpView\";\nimport RoomView from \"./component/RoomView\";\nimport MgobeService from \"../services/mgobe/MgobeService\";\nimport Util from \"../util/Util\";\nimport { AudioManager } from \"../manager/AudioManager\";\nimport GameView from \"./component/GameView\";\n\n\nexport default class MenuViewMediator extends puremvc.Mediator implements puremvc.IMediator {\n    public static NAME: string = \"MenuViewMediator\";\n\n    public constructor(viewComponent: any) {\n        super(MenuViewMediator.NAME, viewComponent);\n    }\n\n    public listNotificationInterests(): string[] {\n        return [\n            WorldNotification.RUN_LAUNCH,\n        ];\n    }\n\n    public handleNotification(notification: puremvc.INotification): void {\n        const data = notification.getBody();\n        switch (notification.getName()) {\n            case WorldNotification.RUN_LAUNCH: {\n                this.actionByLaunchQuery();\n                break;\n            }\n        }\n    }\n\n    public onRegister(): void {\n        this.initView();\n        this.initCallback();\n\n        this.actionByLaunchQuery();\n    }\n\n    public onRemove(): void {\n    }\n\n\n    public initView() {\n        const viewComponent = this.viewComponent as MenuView;\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        // viewComponent.setModeType(userProxy.getModeType());\n        let userInfo = userProxy.getUserInfo();\n\n        let player = viewComponent.playerNode.getComponent(Player);\n        player.setPlayer(userInfo.nickName, userInfo.avatarUrl);\n    }\n\n    public playerGame() {\n\n    }\n\n    public initCallback() {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n        const viewComponent = this.viewComponent as MenuView;\n\n        viewComponent.matchButton.on(\"click\", () => {\n            console.log(\"match button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n            let gameType = (\"match\" + userProxy.getModeType().toString()) as GameType;\n            UIManager.getInstance().openUISync(RoomView, 0, () => {\n                roomProxy.initRoom(gameType);\n                UIManager.getInstance().hideUI(MenuView);\n            });\n        });\n\n        viewComponent.teamButton.on(\"click\", () => {\n            console.log(\"team button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            let gameType = (\"team\" + userProxy.getModeType().toString()) as GameType;\n            this.createRoom(gameType);\n        });\n\n        viewComponent.machineButton.on(\"click\", () => {\n            console.log(\"machine button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().showTip(\"暂未开放，敬请期待!\");\n        });\n\n        viewComponent.helpButton.on(\"click\", () => {\n            console.log(\"help button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().openUISync(HelpView, 0, () => {\n            });\n        });\n\n        viewComponent.rankButton.on(\"click\", () => {\n            console.log(\"rank button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().showTip(\"暂未开放，敬请期待!\");\n        });\n\n        viewComponent.mode2Button.on(\"click\", () => {\n            console.log(\"mode2 button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n            UIManager.getInstance().showTip(\"暂未开放，敬请期待!\");\n\n            // userProxy.setModeType(4);\n            // viewComponent.setModeType(4);\n        });\n\n        viewComponent.mode4Button.on(\"click\", () => {\n            console.log(\"mode4 button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            viewComponent.setModeType(2);\n            userProxy.setModeType(2);\n        });\n    }\n\n    public createRoom(gameType: GameType) {\n        UIManager.getInstance().showLoadingSync(true);\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        console.log(\"创建组队房间\");\n\n        roomProxy.initRoom(gameType);\n        let room = roomProxy.getRoom();\n\n        MgobeService.createRoom(room.playersInfo[0], Util.getPlayerCntByType(gameType), gameType, (event) => {\n\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                console.log(\"创建房间成功\", event);\n                roomProxy.setRoom(event.data.roomInfo);\n                UIManager.getInstance().openUISync(RoomView, 0, () => {\n                    UIManager.getInstance().hideLoading();\n                    UIManager.getInstance().hideUI(MenuView);\n                });\n            } else {\n                if (event.code == MGOBE.ErrCode.EC_ROOM_PLAYER_ALREADY_IN_ROOM) {\n                    MgobeService.leaveRoom((event) => {\n                        if (event.code === MGOBE.ErrCode.EC_OK || event.code === MGOBE.ErrCode.EC_ROOM_PLAYER_NOT_IN_ROOM) {\n                            console.log(\"离开房间成功\", event);\n                            this.createRoom(gameType);\n                        } else {\n                            console.log(\"离开房间失败\", event);\n                            UIManager.getInstance().hideLoading();\n                            UIManager.getInstance().showTip(\"创建房间失败，请重试\");\n                        }\n                    });\n                } else {\n                    console.log(\"创建房间失败\", event);\n                    UIManager.getInstance().hideLoading();\n                    UIManager.getInstance().showTip(\"创建房间失败，请重试\");\n                }\n            }\n        });\n    }\n\n\n    public joinRoom(gameType: GameType, roomId: string) {\n        UIManager.getInstance().showLoadingSync(true);\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        console.log(\"加入组队房间\");\n\n        roomProxy.initRoom(gameType);\n        let room = roomProxy.getRoom();\n\n        MgobeService.joinRoom(roomId, room.playersInfo[0], (event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                console.log(\"加入房间成功\", event);\n                roomProxy.setRoom(event.data.roomInfo);\n                UIManager.getInstance().openUISync(RoomView, 0, () => {\n                    UIManager.getInstance().hideLoading();\n                    UIManager.getInstance().hideUI(MenuView);\n                });\n            } else if (event.code == MGOBE.ErrCode.EC_ROOM_PLAYER_ALREADY_IN_ROOM) {\n                MgobeService.leaveRoom((event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK || event.code === MGOBE.ErrCode.EC_ROOM_PLAYER_NOT_IN_ROOM) {\n                        console.log(\"离开房间成功\", event);\n                        this.joinRoom(gameType, roomId);\n                    } else {\n                        console.log(\"离开房间失败\", event);\n                        UIManager.getInstance().hideLoading();\n                        UIManager.getInstance().showTip(\"加入房间失败，请重试\");\n                    }\n                });\n            } else if (event.code == MGOBE.ErrCode.EC_ROOM_INFO_UNEXIST) {\n                console.log(\"房间不存在\", event);\n                UIManager.getInstance().hideLoading();\n                UIManager.getInstance().showTip(\"加入房间失败，房间不存在\");\n            } else {\n                console.log(\"加入房间失败\", event);\n                UIManager.getInstance().hideLoading();\n                UIManager.getInstance().showTip(\"加入房间失败，请重试\");\n            }\n        });\n    }\n\n    actionByLaunchQuery() {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        let launch = userProxy.getLaunch();\n        // 重置launch\n        userProxy.setLaunch({});\n\n        console.log(\"重置launch\", userProxy.getLaunch());\n\n        console.log(\"执行获取参数\", launch);\n        if ((launch && launch.query && launch.scene) && (launch.scene == 1007 || launch.scene == 1008)) {\n            if (launch.query.type) {\n                let room = roomProxy.getRoom();\n                if (room && room.status) {\n                    if (room.status == RoomStatus.GAME_ING\n                        || room.status == RoomStatus.MATCH_ING\n                        || room.status == RoomStatus.MATCH_SUCC) {\n                        console.log(\"忽略执行获取参数\", room.status);\n                        return;\n                    } else if (room.status == RoomStatus.GAME_END) {\n                        UIManager.getInstance().closeUI(GameView);\n                        UIManager.getInstance().showUI(MenuView);\n                    } else if (room.status == RoomStatus.TEAM) {\n                        UIManager.getInstance().closeUI(RoomView);\n                        UIManager.getInstance().showUI(MenuView);\n                    } else if(room.status == RoomStatus.MATCH_WILL) {\n                        UIManager.getInstance().closeUI(RoomView);\n                        UIManager.getInstance().showUI(MenuView);\n                    }\n                }\n\n                let gameType = launch.query.type as GameType;\n                console.log(\"加入房间\", launch.query);\n                this.joinRoom(gameType, launch.query.roomId);\n            }\n        }\n    }\n}","import AppFacade from \"../../AppFacade\";\nimport MenuViewMediator from \"../MenuViewMediator\";\nimport Util from \"../../util/Util\";\nimport { ProjectConfig } from \"../../Constants\";\nimport { BaseUI } from \"./BaseUI\";\nimport { HelpView } from \"./HelpView\";\nimport { UIManager } from \"../../manager/UIManager\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MenuView extends BaseUI {\n\n    public static NAME = \"MenuView\";\n\n    static getUrl():string {\n        return ProjectConfig.PREFAB_UI_DIR + MenuView.NAME;\n    }\n\n    @property(cc.Node)\n    playerNode: cc.Node = null;\n    @property(cc.Node)\n    mode2Button: cc.Node = null;\n    @property(cc.Node)\n    mode4Button: cc.Node = null;\n    @property(cc.Node)\n    helpButton: cc.Node = null;\n    @property(cc.Node)\n    rankButton: cc.Node = null;\n    @property(cc.Node)\n    machineButton: cc.Node = null;\n    @property(cc.Node)\n    teamButton: cc.Node = null;\n    @property(cc.Node)\n    matchButton: cc.Node = null;\n\n\n    onLoad() {\n\n    }\n\n    start() {\n        AppFacade.getInstance().registerMediator(new MenuViewMediator(this));\n    }\n\n    public onDestroy() {\n        AppFacade.getInstance().removeMediator(MenuViewMediator.NAME);\n    }\n\n    // 切换游戏模式\n    public setModeType(modeType: number) {\n        // let animation = this.getComponent(cc.Animation);\n        // animation.play(\"mode\");\n\n        if (modeType == 2) {\n            this.mode2Button.active = true;\n            this.mode4Button.active = false;\n        } else {\n            this.mode2Button.active = false;\n            this.mode4Button.active = true;\n        }\n    }\n}\n","import { Config, RoomStatus, GameType } from \"../../Constants\";\nimport \"../../library/mgobe/MGOBE.js\";\nimport { PlayerVO } from \"../../model/vo/GameVO\";\n\nexport default class MgobeService {\n    // 将room置为私有 private\n    static room: MGOBE.Room = null;\n\n    static isStartFrameSync() {\n        return this.room.roomInfo.frameSyncState == MGOBE.ENUM.FrameSyncState.START;\n    }\n\n    static startFrameSync(callback?: (event) => any) {\n        if (this.room.roomInfo.frameSyncState !== MGOBE.ENUM.FrameSyncState.START) {\n            this.room.startFrameSync({}, event => {\n                callback && callback(event);\n            });\n        }\n    }\n\n    static stopFrameSync(callback?: (event) => any) {\n        this.room.stopFrameSync({}, event => {\n            callback && callback(event);\n        });\n    }\n\n    static sendFrame(data, callback?: (event) => any) {\n        const sendFramePara: MGOBE.types.SendFramePara = {\n            data: data,\n        };\n\n        this.room.sendFrame(sendFramePara, event => {\n            callback && callback(event);\n        });\n    }\n\n    static sendToClient(msg: string, callback?: (event) => any) {\n        const sendToClientPara: MGOBE.types.SendToClientPara = {\n            recvPlayerList: [],\n            recvType: MGOBE.types.RecvType.ROOM_ALL,\n            msg,\n        };\n\n        this.room.sendToClient(sendToClientPara, event => {\n            callback && callback(event);\n        });\n    }\n\n    static getMyRoom(callback?: (event) => any) {\n        MGOBE.Room.getMyRoom(event => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                this.room.roomInfo = event.data.roomInfo;\n\n            }\n            callback && callback(event);\n        });\n    }\n\n    static initRoom(roomId: string, callback?: (event) => any) {\n        // const roomInfo = { id: roomId };\n        // this.room.initRoom(roomInfo);\n        const getRoomByRoomIdPara2 = {\n            roomId: roomId,\n        };\n        MGOBE.Room.getRoomByRoomId(getRoomByRoomIdPara2, (event) => {\n            callback && callback(event);\n        });\n    }\n\n    static joinRoom(roomId: string, player: PlayerVO, callback?: (event) => any) {\n        this.initRoom(roomId, (event) => {\n            console.log(\"获取房间信息\", roomId, event);\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                console.log(\"获取房间信息, 更新成功\", roomId);\n                this.room.initRoom(event.data.roomInfo);\n\n            }\n            const playerInfo: MGOBE.types.PlayerInfoPara = {\n                name: player.nickName,\n                customPlayerStatus: player.isReady ? 1 : 0,\n                customProfile: player.avatarUrl,\n            };\n\n            const joinRoomPara: MGOBE.types.JoinRoomPara = {\n                playerInfo: playerInfo,\n            };\n            this.room.joinRoom(joinRoomPara, (event) => {\n                callback && callback(event);\n            });\n        });\n    }\n\n    static createRoom(player: PlayerVO, maxPlayers: number, roomType: string, callback?: (event) => any) {\n        const playerInfo: MGOBE.types.PlayerInfoPara = {\n            name: player.nickName,\n            customPlayerStatus: player.isReady ? 1 : 0,\n            customProfile: player.avatarUrl,\n        };\n\n        const createRoomPara: MGOBE.types.CreateRoomPara = {\n            roomName: roomType,\n            maxPlayers: maxPlayers,\n            roomType: roomType,\n            isPrivate: false,\n            customProperties: \"WAIT\",\n            playerInfo: playerInfo,\n        };\n\n        this.room.createRoom(createRoomPara, (event) => {\n            callback && callback(event);\n        });\n    }\n\n    static cancelMatch(callback?: (event) => any) {\n        const cancelMatchPara = {\n            matchType: MGOBE.ENUM.MatchType.PLAYER_COMPLEX,\n        };\n\n        this.room.cancelPlayerMatch(cancelMatchPara, event => {\n            callback && callback(event);\n        });\n    }\n\n    static matchPlayers(player:PlayerVO, maxPlayers: number, roomType: string, callback?: (event) => any) {\n        const playerInfo = {\n            name: player.nickName,\n            customPlayerStatus: 1,\n            customProfile: player.avatarUrl,\n            matchAttributes: [{\n                name: \"score\",\n                value: player.value,\n            }]\n        };\n\n        let matchCode = Config.matchCode1v1;\n        if(roomType == GameType.MATCH4) {\n            matchCode = Config.matchCode1v1v1v1;\n        }\n\n        const matchPlayersPara = {\n            playerInfo,\n            matchCode: matchCode,\n        };\n\n        // 发起匹配\n        this.room.matchPlayers(matchPlayersPara, event => {\n            callback && callback(event);\n        });\n    }\n\n    static leaveRoom(callback?: (event) => any) {\n        this.room.leaveRoom({}, event => {\n            callback && callback(event);\n        });\n    }\n\n    // static changeRoomStatus(roomStatus: RoomStatus) {\n    //     const changeRoomPara = {\n    //         customProperties: roomStatus as string,\n    //     };\n\n    //     this.room.changeRoom(changeRoomPara, event => console.log(\"changeRoom\", roomStatus, event));\n    // }\n\n    static changeCustomPlayerStatus(customPlayerStatus, callback?: (event) => any) {\n        const changeCustomPlayerStatusPara = {\n            customPlayerStatus\n        };\n\n        this.room.changeCustomPlayerStatus(changeCustomPlayerStatusPara, event => {\n            callback && callback(event);\n        });\n    }\n\n    static isInited(): boolean {\n        // 初始化成功后才有玩家ID\n        return !!MGOBE.Player && !!MGOBE.Player.id;\n    }\n\n    static initMgobeSDK(openId: string, gameId: string, secretKey: string, url: string, cacertNativeUrl: string, callback?: (event: { code: MGOBE.ErrCode }) => any): void {\n        // 如果已经初始化，直接回调成功\n        if (this.isInited()) {\n            return callback && callback({ code: MGOBE.ErrCode.EC_OK });\n        }\n\n        let gameInfo: MGOBE.types.GameInfoPara = {\n            gameId: gameId,\n            secretKey: secretKey,\n            openId: openId,\n        }\n        let config: MGOBE.types.ConfigPara = {\n            url: url,\n            reconnectInterval: Config.reconnectInterval,\n            reconnectMaxTimes: Config.reconnectMaxTimes,\n            resendInterval: Config.resendInterval,\n            resendTimeout: Config.resendTimeout,\n            isAutoRequestFrame: true,\n            cacertNativeUrl: cacertNativeUrl,\n        }\n\n        MGOBE.DebuggerLog.enable = Config.isDebug;\n\n        // if (cc.sys.isNative) {\n        //     MGOBE.DebuggerLog.enable = false;\n        // }\n\n        // 初始化\n        MGOBE.Listener.init(gameInfo, config, event => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                // 初始化后才能添加监听\n                this.room = new MGOBE.Room();\n                MGOBE.Listener.add(this.room);\n                // 设置默认广播\n                this.setBroadcastCallbacks(null, {});\n            }\n            callback && callback({ code: event.code });\n        });\n    }\n\n    // TODO 将callback注册放到这里 将room\n    static setCallbacks() {\n\n    }\n\n    /**\n     * 设置房间广播回调函数\n     * @param broadcastCallbacks\n     */\n    static setBroadcastCallbacks(context: any, broadcastCallbacks?: BroadcastCallbacks) {\n\n        if (!this.room) {\n            return;\n        }\n\n        // 默认回调函数\n        const generateDefaultCallback = (tag: string) => (event) => { console.log(tag, \"->\", event); };\n\n        const defaultCallbacks: BroadcastCallbacks = {\n            onUpdate: () => generateDefaultCallback(\"onUpdate\"),\n            onJoinRoom: () => generateDefaultCallback(\"onJoinRoom\"),\n            onLeaveRoom: () => generateDefaultCallback(\"onLeaveRoom\"),\n            onChangeRoom: () => generateDefaultCallback(\"onChangeRoom\"),\n            onDismissRoom: () => generateDefaultCallback(\"onDismissRoom\"),\n            onStartFrameSync: () => generateDefaultCallback(\"onStartFrameSync\"),\n            onStopFrameSync: () => generateDefaultCallback(\"onStopFrameSync\"),\n            onRecvFrame: (event: MGOBE.types.BroadcastEvent<MGOBE.types.RecvFrameBst>) => {\n                generateDefaultCallback(\"onRecvFrame\");\n                // 每次收到帧广播都需要计算\n                // calcFrame(event.data.frame);\n            },\n            onChangeCustomPlayerStatus: () => generateDefaultCallback(\"onChangeCustomPlayerStatus\"),\n            onRemovePlayer: () => generateDefaultCallback(\"onRemovePlayer\"),\n            onRecvFromClient: () => generateDefaultCallback(\"onRecvFromClient\"),\n            onRecvFromGameSvr: () => generateDefaultCallback(\"onRecvFromGameSvr\"),\n            onAutoRequestFrameError: () => generateDefaultCallback(\"onAutoRequestFrameError\"),\n        };\n\n        // 给 room 实例设置广播回调函数\n        Object.keys(defaultCallbacks).forEach((key: keyof BroadcastCallbacks) => {\n            const callback = broadcastCallbacks[key] ? broadcastCallbacks[key].bind(context) : defaultCallbacks[key];\n            this.room[key] = callback;\n        });\n    }\n}\n\ninterface BroadcastCallbacks {\n    onUpdate?,\n    onJoinRoom?,\n    onLeaveRoom?,\n    onChangeRoom?,\n    onDismissRoom?,\n    onStartFrameSync?,\n    onStopFrameSync?,\n    onRecvFrame?,\n    onChangeCustomPlayerStatus?,\n    onRemovePlayer?,\n    onRecvFromClient?,\n    onRecvFromGameSvr?,\n    onAutoRequestFrameError?,\n}","export abstract class Platform {\n    private static instance: Platform;\n\n    public static getInstance(): Platform {\n        if (this.instance == null) {\n            switch (cc.sys.platform) {\n                case cc.sys.WECHAT_GAME:\n                    this.instance = new WXPlatform();\n                    break;\n                default:\n                    this.instance = new DevPlatform();\n            }\n        }\n\n        return this.instance;\n    }\n}\n\nexport class WXPlatform extends Platform {\n\n}\n\nexport class DevPlatform extends Platform {\n\n}","import Util from \"../../util/Util\";\nimport { PlayerStatus } from \"../../Constants\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class Player extends cc.Component {\n    @property(cc.Label)\n    nickNameNode: cc.Label = null;\n    @property(cc.Node)\n    headNode: cc.Node = null;\n    @property(cc.Node)\n    headWaitNode: cc.Node = null;\n    @property(cc.Node)\n    readyNode: cc.Node = null;\n    @property(cc.Node)\n    wallCntNode: cc.Node = null;\n    @property(cc.Node)\n    timeNode: cc.Node = null;\n    @property(cc.Node)\n    leaveNode: cc.Node = null;\n    @property(cc.Node)\n    offlineNode: cc.Node = null;\n\n\n    setPlayer(nickName: string, avatarUrl: string) {\n        let name = this.nickNameNode.getComponent(cc.Label);\n        let headBG = this.headNode.getComponent(cc.Sprite);\n        let head =  this.headNode;\n        if (avatarUrl) {\n            cc.loader.load({\n                url: avatarUrl,\n                type: 'jpg'\n            }, function (err, texture) {\n                if (err == null) {\n                    headBG.spriteFrame = new cc.SpriteFrame(texture);\n                }\n                head.active = true;\n            });\n        } else {\n            head.active = true;\n        }\n\n        if (nickName) {\n            nickName = Util.cutstr(nickName, 5);\n            name.string = nickName;\n        } else {\n            name.string = \"\";\n        }\n    }\n\n    setWait(isWait: boolean) {\n        this.headWaitNode.active = isWait;\n    }\n\n    setReady(isReady: boolean) {\n        this.readyNode.active = isReady;\n    }\n\n    setWallNum(wallcnt: number) {\n        let wallcntLabel = this.wallCntNode.getComponent(cc.Label);\n        wallcntLabel.string = wallcnt.toString();\n    }\n\n    setTime(isShow: boolean, time: number) {\n        this.timeNode.active = isShow;\n        if (isShow) {\n            let num = this.timeNode.getChildByName('num').getComponent(cc.Label);\n            num.string = time.toString();\n        }\n    }\n\n    setStatus(status: PlayerStatus) {\n        if (status == PlayerStatus.DEFAULT) {\n            this.leaveNode.active = false;\n            this.offlineNode.active = false;\n        } else if (status == PlayerStatus.LEAVE) {\n            this.leaveNode.active = true;\n            this.offlineNode.active = false;\n        } else if (status == PlayerStatus.OFFLINE) {\n            this.leaveNode.active = false;\n            this.offlineNode.active = true;\n        }\n    }\n}","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PopupView extends cc.Component {\n    loadingNode: cc.Node = null;\n\n    onLoad() {\n        this.loadingNode = this.node.getChildByName(\"loading\");\n        this.loadingNode.active = false;\n    }\n\n    start() {\n    }\n\n    showLoading(isMask: boolean = false) {\n        this.loadingNode.active = true;\n        let loadBG: cc.Node = this.loadingNode.getChildByName(\"loadingBG\");\n        loadBG.active = isMask;\n    }\n\n    hideLoading() {\n        this.loadingNode.active = false;\n    }\n\n    update(dt) {\n        if (this.loadingNode.active) {\n            this.rotateLoadingFrame();\n        }\n    }\n\n    rotateLoadingFrame() {\n        let rotationInc = 5;\n        let loadingIcon = this.loadingNode.getChildByName('load_icon');\n\n        loadingIcon.angle -= rotationInc;\n    }\n}","import { RoomVO } from \"./vo/RoomVO\";\nimport { RoomNotification, GameType, RoomStatus, WorldNotification, PlayerStatus } from \"../Constants\";\nimport Util from \"../util/Util\";\nimport UserProxy from \"./UserProxy\";\nimport { PlayerVO } from \"./vo/GameVO\";\n\nexport default class RoomProxy extends puremvc.Proxy implements puremvc.IProxy {\n    public static NAME: string = \"RoomProxy\";\n    private static instance: RoomProxy = null;\n    private room: RoomVO = null;\n\n    public static getInstance() {\n        if (!this.instance) {\n            this.instance = new RoomProxy();\n        }\n        return this.instance;\n    }\n\n    public constructor() {\n        super(RoomProxy.NAME);\n    }\n\n    public initRoom(gameType: GameType) {\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        let playerMaxNum = Util.getPlayerCntByType(gameType);\n        let userInfo = userProxy.getUserInfo();\n        let player = new PlayerVO();\n        player.avatarUrl = userInfo.avatarUrl;\n        player.nickName = userInfo.nickName;\n        player.isReady = false;\n        player.playerID = userProxy.getPlayerId();\n\n        this.room = new RoomVO();\n        this.room.gameType = gameType;\n        this.room.mePlayerIdx = 0;\n        this.room.playersInfo = [player];\n\n        if(gameType == GameType.MATCH2 || gameType == GameType.MATCH4) {\n            this.room.status = RoomStatus.MATCH_ING;\n        } else if(gameType == GameType.TEAM2 || gameType == GameType.TEAM4) {\n            this.room.status = RoomStatus.TEAM;\n        }\n\n        console.log(\"初始化房间数据\", this.room);\n    }\n\n    public isRoomReady(): boolean {\n        let playerMaxNum = Util.getPlayerCntByType(this.room.gameType);\n\n        for (let i = 0; i < playerMaxNum; i++) {\n            if (!this.room.playersInfo[i] || this.room.playersInfo[i].playerID == \"\" || this.room.playersInfo[i].isReady == false) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public setPlayerStatus(isReady: boolean) {\n        this.room.playersInfo[0].isReady = isReady;\n        this.facade.sendNotification(RoomNotification.ROOM_UPDATE);\n    }\n\n    public setRoomStatus(status: RoomStatus) {\n        this.room.status = status;\n        this.facade.sendNotification(RoomNotification.ROOM_UPDATE);\n    }\n\n    public setRoom(roomInfo: MGOBE.types.RoomInfo) {\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        // 获取当前玩家位次\n        let meIdx = 0;\n        let playerList = roomInfo.playerList;\n        for (let i = 0; i < playerList.length; i++) {\n            if (playerList[i].id == userProxy.getPlayerId()) {\n                meIdx = i;\n                break;\n            }\n        }\n        this.room.mePlayerIdx = meIdx;\n        this.room.roomId = roomInfo.id;\n\n        this.room.playersInfo = [];\n\n        // 更新玩家信息\n        let playerMaxNum = Util.getPlayerCntByType(this.room.gameType);\n        for (let i = 0; i < playerList.length; i++) {\n            let new_i = (i + meIdx) % playerMaxNum;\n            let playerInfo = new PlayerVO();\n            playerInfo.playerID = playerList[new_i].id;\n            playerInfo.avatarUrl = playerList[new_i].customProfile;\n            playerInfo.nickName = playerList[new_i].name;\n            playerInfo.isReady = playerList[new_i].customPlayerStatus == 1;\n            this.room.playersInfo.push(playerInfo);\n        }\n\n        this.facade.sendNotification(RoomNotification.ROOM_UPDATE);\n    }\n\n    public getRoom(): RoomVO {\n        return this.room;\n    }\n\n    // 判断是否已在房间内\n    // public returnRoom() {\n    //     MgobeService.getMyRoom((event) => {\n    //         if (event.code === MGOBE.ErrCode.EC_OK) {\n    //             this.setRoom(event.data.roomInfo);\n    //             // 如果房间有进行中的游戏，才发送消息\n    //             if (MgobeService.isStartFrameSync()) {\n    //                 console.log(\"玩家所在房间正在游戏中\", event);\n    //                 this.facade.sendNotification(RoomNotification.ROOM_RETURN_CHECK);\n    //             } else {\n    //                 console.log(\"玩家所在房间不在游戏中\");\n    //                 this.leaveRoom();\n    //                 this.facade.sendNotification(RoomNotification.ROOM_RETURN_NOT_CHECK);\n    //             }\n    //         } else {\n    //             console.log(\"玩家不在房间中\");\n    //             this.facade.sendNotification(RoomNotification.ROOM_RETURN_NOT_CHECK);\n    //         }\n    //     });\n    // }\n\n}","import { GameType, RoomStatus } from \"../../Constants\";\nimport { GameVO, PlayerVO } from \"./GameVO\";\n\nexport class RoomVO {\n    roomId : string;\n\n    mePlayerIdx: number;\n\n    gameType: GameType;\n\n    status: RoomStatus;\n\n    playersInfo: Array<PlayerVO> = [];\n\n    public constructor() {\n    }\n}\n","import { RoomNotification, Scene, RoomStatus, GameType } from \"../Constants\";\nimport RoomView from \"../view/component/RoomView\";\nimport RoomProxy from \"../model/RoomProxy\";\nimport { Platform } from \"../services/platform/IPlatform\";\nimport MgobeService from \"../services/mgobe/MgobeService\";\nimport Util from \"../util/Util\";\nimport GameProxy from \"../model/GameProxy\";\nimport { UIManager } from \"../manager/UIManager\";\nimport { HelpView } from \"./component/HelpView\";\nimport MenuView from \"./component/MenuView\";\nimport GameView from \"./component/GameView\";\nimport { AudioManager } from \"../manager/AudioManager\";\n\nexport default class RoomViewMediator extends puremvc.Mediator implements puremvc.IMediator {\n    public static NAME: string = \"RoomViewMediator\";\n\n    public constructor(viewComponent: any) {\n        super(RoomViewMediator.NAME, viewComponent);\n    }\n\n    public listNotificationInterests(): string[] {\n        return [\n            RoomNotification.ROOM_UPDATE,\n            RoomNotification.ROOM_LEAVE,\n        ];\n    }\n\n    public handleNotification(notification: puremvc.INotification): void {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        const viewComponent = this.viewComponent as RoomView;\n\n        const data = notification.getBody();\n        switch (notification.getName()) {\n            case RoomNotification.ROOM_UPDATE: {\n                let room = roomProxy.getRoom();\n                viewComponent.updateRoom(room);\n                break;\n            }\n            case RoomNotification.ROOM_LEAVE: {\n                cc.director.loadScene(Scene.MENU);\n                break;\n            }\n        }\n    }\n\n    public onRegister(): void {\n        this.initView();\n        this.initCallback();\n\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        let room = roomProxy.getRoom();\n        console.log(\"onRego\", room);\n\n        if (room.gameType == GameType.MATCH2 || room.gameType == GameType.MATCH4) {\n            if (room.status == RoomStatus.MATCH_ING) {\n                this.matchPlayers();\n            }\n        } else if (room.gameType == GameType.TEAM2 || room.gameType == GameType.TEAM4) {\n            this.listenRoom();\n        }\n    }\n\n    public onRemove(): void {\n        this.removeListenRoom();\n    }\n\n    public initView() {\n        const viewComponent = this.viewComponent as RoomView;\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n\n        var anim = viewComponent.getComponent(cc.Animation);\n        var animState = anim.play(\"match\");\n\n        // 获取房间信息，初始化界面\n        let room = roomProxy.getRoom();\n        viewComponent.updateRoom(room);\n    }\n\n    public initCallback() {\n        const viewComponent = this.viewComponent as RoomView;\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n\n        viewComponent.leaveButton.on(\"click\", () => {\n            console.log(\"leave button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            if(roomProxy.getRoom().status == RoomStatus.MATCH_ING) {\n                this.cancelMatch();\n            }\n            this.leaveRoom();\n            roomProxy.setRoomStatus(RoomStatus.DEFAULT);\n            UIManager.getInstance().showUI(MenuView);\n            UIManager.getInstance().closeUI(RoomView);\n        });\n\n        viewComponent.helpButton.on(\"click\", () => {\n            console.log(\"help button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            UIManager.getInstance().openUISync(HelpView, 0, () => {\n            });\n        });\n\n        viewComponent.matchCancelButton.on(\"click\", () => {\n            console.log(\"match cancel button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            this.cancelMatch();\n        });\n\n        viewComponent.matchBeginButton.on(\"click\", () => {\n            console.log(\"match begin button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            this.matchPlayers();\n        });\n\n        viewComponent.teamReadyButton.on(\"click\", () => {\n            console.log(\"ready button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            MgobeService.changeCustomPlayerStatus(1, (event) => {\n                if (event.code === MGOBE.ErrCode.EC_OK) {\n                } else {\n                    UIManager.getInstance().showTip(\"操作失败，请重试\");\n                }\n            });\n        });\n\n        viewComponent.teamUnreadyButton.on(\"click\", () => {\n            console.log(\"unready button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            MgobeService.changeCustomPlayerStatus(0, (event) => {\n                if (event.code === MGOBE.ErrCode.EC_OK) {\n                } else {\n                    UIManager.getInstance().showTip(\"操作失败，请重试\");\n                }\n            });\n        });\n\n        viewComponent.teamInviteButton.on(\"click\", () => {\n            console.log(\"invite button click\");\n            AudioManager.getInstance().playSound(\"touch\");\n\n            let room = roomProxy.getRoom();\n            console.log(\"好友组队邀请\", \"type=\" + room.gameType + \"&roomId=\" + room.roomId);\n            Platform().shareAppMessage(\n                \"房已开好，就差你了！\",\n                \"https://mmocgame.qpic.cn/wechatgame/iaj0rRlwQUrJtbiaxIaZNhApCqNmKHeJHe06GuLX9qyTqRI9icaUiciaM3wyStPRIvn3v/0\",\n                \"Eg-pgRbJSpyh-uGwnzdeZQ\",\n                \"type=\" + room.gameType + \"&roomId=\" + room.roomId,\n            );\n        });\n    }\n\n    public matchPlayers() {\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        roomProxy.setRoomStatus(RoomStatus.MATCH_ING);\n        let room = roomProxy.getRoom();\n\n        let callback = (event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                console.log(\"发起匹配成功\", event);\n                MgobeService.changeCustomPlayerStatus(1, (event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK) {\n                        roomProxy.setRoomStatus(RoomStatus.MATCH_SUCC);\n                        roomProxy.setRoom(event.data.roomInfo);\n                    } else {\n                        UIManager.getInstance().showTip(\"匹配失败，请重试\");\n                    }\n                });\n                this.listenRoom();\n            } else if (event.code == MGOBE.ErrCode.EC_MATCH_TIMEOUT) {\n                console.log(\"匹配超时\", event);\n                roomProxy.setRoomStatus(RoomStatus.MATCH_WILL);\n                UIManager.getInstance().showTip(\"匹配超时，请重试\");\n            } else if (event.code == MGOBE.ErrCode.EC_MATCH_PLAYER_IS_IN_MATCH) {\n                console.log(\"已在匹配中\", event);\n                MgobeService.cancelMatch((event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK) {\n                        console.log(\"取消匹配成功\", event);\n                        this.matchPlayers();\n                    } else {\n                        console.log(\"取消匹配失败\", event);\n                        roomProxy.setRoomStatus(RoomStatus.MATCH_WILL);\n                        UIManager.getInstance().showTip(\"匹配失败，请重试\");\n                    }\n                });\n                roomProxy.setRoomStatus(RoomStatus.MATCH_ING);\n            } else if (event.code == MGOBE.ErrCode.EC_ROOM_PLAYER_ALREADY_IN_ROOM) {\n                console.log(\"已在房间中，离开房间并重试\", event);\n                MgobeService.leaveRoom((event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK || event.code === MGOBE.ErrCode.EC_ROOM_PLAYER_NOT_IN_ROOM) {\n                        console.log(\"离开房间成功\", event);\n                        roomProxy.initRoom(room.gameType);\n                        MgobeService.matchPlayers(room.playersInfo[0], Util.getPlayerCntByType(room.gameType),\n                            room.gameType, callback);\n                    } else {\n                        console.log(\"离开房间失败\", event);\n                        roomProxy.setRoomStatus(RoomStatus.MATCH_WILL);\n                        UIManager.getInstance().showTip(\"匹配失败，请重试\");\n                    }\n                });\n            } else {\n                console.log(\"发起匹配失败\", event);\n                roomProxy.setRoomStatus(RoomStatus.MATCH_WILL);\n                UIManager.getInstance().showTip(\"匹配失败，请重试\");\n            }\n        };\n        console.log(\"发起匹配\", room);\n        MgobeService.matchPlayers(room.playersInfo[0], Util.getPlayerCntByType(room.gameType),\n            room.gameType, callback);\n    }\n\n    public cancelMatch() {\n        console.log(\"取消匹配\");\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n\n        MgobeService.cancelMatch((event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                console.log(\"取消匹配成功\", event);\n                roomProxy.setRoomStatus(RoomStatus.MATCH_WILL);\n            } else {\n                console.log(\"取消匹配失败\", event);\n                UIManager.getInstance().showTip(\"取消匹配失败，请重试\");\n            }\n        });\n    }\n\n    public leaveRoom() {\n        MgobeService.getMyRoom((event) => {\n            if (event.code === MGOBE.ErrCode.EC_OK) {\n                MgobeService.leaveRoom((event) => {\n                    if (event.code === MGOBE.ErrCode.EC_OK || event.code === MGOBE.ErrCode.EC_ROOM_PLAYER_NOT_IN_ROOM) {\n                        console.log(\"离开房间成功\", event);\n                    } else {\n                        console.log(\"离开房间失败\", event);\n                    }\n                });\n            } else {\n                console.log(\"获取房间信息失败\", event);\n            }\n        });\n    }\n\n    public listenRoom() {\n        console.log(\"启动room监听\");\n        const viewComponent = this.viewComponent as RoomView;\n        const roomProxy = this.facade.retrieveProxy(RoomProxy.NAME) as RoomProxy;\n        const gameProxy = this.facade.retrieveProxy(GameProxy.NAME) as GameProxy;\n\n        // 开启onUpdate监听\n        MgobeService.room.onUpdate = (event) => {\n            console.log(\"事件回调onUpdate\", event.roomInfo);\n            roomProxy.setRoom(event.roomInfo);\n            let room = roomProxy.getRoom();\n\n            if (roomProxy.isRoomReady()) {\n                gameProxy.createGame(room);\n                console.log(\"全部玩家已准备，前往Game场景\");\n                UIManager.getInstance().openUISync(GameView, 0, () => {\n                    UIManager.getInstance().closeUI(RoomView);\n                });\n            }\n        }\n\n\n        MgobeService.room.onJoinRoom = (event) => {\n\n        };\n\n        MgobeService.room.onLeaveRoom = (event) => {\n\n        };\n    };\n\n\n    public removeListenRoom() {\n        console.log(\"关闭room监听\");\n        // 关闭onUpdate监听\n        MgobeService.room.onUpdate = null;\n    }\n}","import AppFacade from \"../../AppFacade\";\nimport RoomViewMediator from \"../RoomViewMediator\";\nimport { RoomVO } from \"../../model/vo/RoomVO\";\nimport Util from \"../../util/Util\";\nimport { GameType, RoomStatus, ProjectConfig } from \"../../Constants\";\nimport { Platform } from \"../../services/platform/IPlatform\";\nimport { BaseUI } from \"./BaseUI\";\nimport { Player } from \"./Player\";\n\nconst { ccclass, property } = cc._decorator;\n\n\n@ccclass\nexport default class RoomView extends BaseUI {\n\n    public static NAME = \"RoomView\";\n\n    static getUrl(): string {\n        return ProjectConfig.PREFAB_UI_DIR + RoomView.NAME;\n    }\n\n    @property(cc.Node)\n    leaveButton: cc.Node = null;\n    @property(cc.Node)\n    helpButton: cc.Node = null;\n    @property(cc.Node)\n    matchCancelButton: cc.Node = null;\n    @property(cc.Node)\n    matchBeginButton: cc.Node = null;\n    @property(cc.Node)\n    matchBarNode: cc.Node = null;\n    @property(cc.Node)\n    player0Node: cc.Node = null;\n    @property(cc.Node)\n    player1Node: cc.Node = null;\n    @property(cc.Node)\n    player2Node: cc.Node = null;\n    @property(cc.Node)\n    player3Node: cc.Node = null;\n    @property(cc.Node)\n    teamInviteButton: cc.Node = null;\n    @property(cc.Node)\n    teamReadyButton: cc.Node = null;\n    @property(cc.Node)\n    teamUnreadyButton: cc.Node = null;\n\n    start() {\n        AppFacade.getInstance().registerMediator(new RoomViewMediator(this));\n    }\n\n    public onDestroy() {\n        AppFacade.getInstance().removeMediator(RoomViewMediator.NAME);\n    }\n\n    updateRoom(room: RoomVO) {\n        console.log(\"更新房间界面\", room);\n\n        let playerNodeArray: Array<cc.Node> = [];\n        let playerCnt = Util.getPlayerCntByType(room.gameType);\n        if (playerCnt == 2) {\n            playerNodeArray.push(this.player0Node);\n            playerNodeArray.push(this.player2Node);\n            this.player1Node.active = false;\n            this.player3Node.active = false;\n        } else {\n            playerNodeArray.push(this.player0Node);\n            playerNodeArray.push(this.player1Node);\n            playerNodeArray.push(this.player2Node);\n            playerNodeArray.push(this.player3Node);\n        }\n\n        if (room.gameType == GameType.MATCH2 || room.gameType == GameType.MATCH4) {\n            if (room.status == RoomStatus.MATCH_WILL) {\n                this.matchBarNode.active = false;\n                this.matchBeginButton.active = true;\n            } else if (room.status == RoomStatus.MATCH_ING) {\n                this.matchBarNode.active = true;\n                this.matchBeginButton.active = false;\n            } else if (room.status == RoomStatus.MATCH_SUCC) {\n                this.matchBarNode.active = false;\n                this.matchBeginButton.active = false;\n            }\n        } else if (room.gameType == GameType.TEAM2 || room.gameType == GameType.TEAM4) {\n            this.teamReadyButton.active = !room.playersInfo[0].isReady;\n            this.teamUnreadyButton.active = room.playersInfo[0].isReady;\n            this.teamInviteButton.active = true;\n        }\n\n        for (let i = 0; i < playerCnt; i++) {\n            let player = playerNodeArray[i].getComponent(Player);\n\n            if (room.playersInfo[i]) {\n                let isReady = false;\n                if (room.gameType == GameType.TEAM2 || room.gameType == GameType.TEAM4) {\n                    isReady = room.playersInfo[i].isReady;\n                }\n                player.setPlayer(room.playersInfo[i].nickName, room.playersInfo[i].avatarUrl);\n                player.setWait(false);\n                player.setReady(isReady);\n            } else {\n                player.setPlayer(\"\", \"\");\n                player.setWait(true);\n                player.setReady(false);\n            }\n        }\n    }\n\n}\n","const { ccclass, property } = cc._decorator;\nimport AppFacade from './AppFacade';\nimport { UIManager } from './manager/UIManager';\nimport { WelcomeView } from './view/component/WelcomeView';\n\n@ccclass\nexport default class Start extends cc.Component {\n    public onLoad() {\n        this.initFrameSize();\n    }\n\n    public start() {\n        AppFacade.getInstance().startup();\n        this.loadStartView();\n    }\n\n    public update(dt: number) {\n    }\n\n    // 自适应屏幕适配\n    private initFrameSize() {\n        let frameSize = cc.view.getFrameSize();\n        let bFitWidth = (frameSize.width / frameSize.height) < (750 / 1334);\n        cc.Canvas.instance.fitWidth = bFitWidth;\n        cc.Canvas.instance.fitHeight = !bFitWidth;\n    }\n\n    private loadStartView() {\n        UIManager.getInstance().openUISync(WelcomeView, 10, () => {});\n    }\n}\n","import { BaseUI } from \"./BaseUI\";\nimport { Tip } from \"./Tip\";\nimport { ProjectConfig } from \"../../Constants\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class TipView extends BaseUI {\n\n    protected static NAME = \"TipView\";\n\n    static getUrl():string {\n        return ProjectConfig.PREFAB_UI_DIR + TipView.NAME;\n    }\n\n    @property(cc.Prefab)\n    private tipPrefab: cc.Prefab = null;\n    private tipPool: Tip[] = [];\n\n    showTip(message: string)\n    {\n        for(let i = 0; i < this.tipPool.length; ++i)\n        {\n            if(this.tipPool[i] != null && this.tipPool[i].isReady())\n            {\n                this.tipPool[i].playTip(message);\n                return;\n            }\n        }\n        console.log(\"create tip\", message);\n        let TipNode = cc.instantiate(this.tipPrefab);\n        TipNode.parent = this.node\n        let tip = TipNode.getComponent(Tip);\n        this.tipPool.push(tip);\n\n        tip.playTip(message);\n\n        // let sleep = cc.delayTime(0.5);\n        // let callback = cc.callFunc(() => {\n        // }, this);\n\n        // let action = cc.sequence(sleep, callback);\n        // this.node.runAction(action);\n    }\n}","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class Tip extends cc.Component {\n    @property(cc.Label)\n    private tipLabel: cc.Label = null;\n    private ready: boolean = true;\n\n    onLoad() {\n        this.node.active = false;\n    }\n\n    public playTip(message: string) {\n        this.node.stopAllActions();\n        this.ready = false;\n        this.tipLabel.string = message;\n        this.reset();\n        this.node.active = true;\n\n        let action0 = cc.moveTo(0.5, 0, 128);\n        let action1 = cc.fadeIn(0.5);\n        let action2 = cc.spawn(action0, action1);\n        let action3 = cc.delayTime(1);\n        let action4 = cc.fadeOut(0.5);\n        let callback = cc.callFunc(() => {\n            this.ready = true;\n        }, this);\n\n        let action = cc.sequence(action2, action3, action4, callback);\n        this.node.runAction(action);\n    }\n\n    public isReady(): boolean {\n        return this.ready;\n    }\n\n    private reset() {\n        this.node.setPosition(0, 0);\n        this.node.opacity = 255;\n    }\n}","import { BaseUI, UIClass } from \"../view/component/BaseUI\";\nimport { TipView } from \"../view/component/TipView\";\nimport { LoadingView } from \"../view/component/LoadingView\";\n\n\nexport class UIManager {\n    private static instance: UIManager;\n    private uiList: BaseUI[] = [];\n    private uiRoot: cc.Node = null;\n\n    public static getInstance(): UIManager {\n        if (this.instance == null) {\n            this.instance = new UIManager();\n        }\n        return this.instance;\n    }\n\n    constructor() {\n        this.uiRoot = cc.find(\"Canvas\");\n    }\n\n    public async showLoadingSync(isMask: boolean) {\n        await this.openUISync(LoadingView, 201, (ui) => {\n            ui.showLoading(isMask);\n        });\n    }\n\n    public hideLoading() {\n        let ui = UIManager.getInstance().getUI(LoadingView) as LoadingView;\n        if (ui) {\n            ui.hideLoading();\n        }\n    }\n\n    public showTip(message: string) {\n        this.openUISync(TipView, 200, (ui) => {\n            ui.showTip(message);\n        });\n    }\n\n    public async openUISync<T extends BaseUI>(uiClass: UIClass<T>, zOrder?: number, callback?: Function, onProgress?: Function, ...args: any[]) {\n        let ui = this.getUI(uiClass);\n        if (ui) {\n            callback && callback(ui, args);\n            return;\n        }\n\n        await this.loadResSync(uiClass.getUrl(), (completedCount: number, totalCount: number, item: any) => {\n            if (onProgress) {\n                onProgress(completedCount, totalCount, item);\n            }\n        }, (error, prefab) => {\n            if (error) {\n                cc.log(error);\n                return;\n            }\n            ui = this.getUI(uiClass);\n            if (ui) {\n                callback && callback(ui, args);\n                return;\n            }\n            let uiNode: cc.Node = cc.instantiate(prefab);\n            uiNode.parent = this.uiRoot;\n            //zOrder && uiNode.setLocalZOrder(zOrder);\n            if (zOrder) { uiNode.zIndex = zOrder; }\n            ui = uiNode.getComponent(uiClass) as BaseUI;\n            ui.tag = uiClass;\n            this.uiList.push(ui);\n\n            callback && callback(ui, args);\n        });\n    }\n\n    public closeUI<T extends BaseUI>(uiClass: UIClass<T>) {\n        for (let i = 0; i < this.uiList.length; ++i) {\n            if (this.uiList[i].tag === uiClass) {\n                this.uiList[i].node.destroy();\n                this.uiList.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    public showUI<T extends BaseUI>(uiClass: UIClass<T>, callback?: Function) {\n        let ui = this.getUI(uiClass);\n        if (ui) {\n            ui.node.active = true;\n            ui.onShow();\n            callback && callback(ui);\n        }\n        else {\n            this.openUISync(uiClass, 0, () => {\n                let ui = this.getUI(uiClass);\n                ui.onShow();\n                callback && callback(ui);\n            });\n        }\n    }\n\n    public hideUI<T extends BaseUI>(uiClass: UIClass<T>) {\n        let ui = this.getUI(uiClass);\n        if (ui) {\n            ui.node.active = false;\n        }\n    }\n\n    public getUI<T extends BaseUI>(uiClass: UIClass<T>): BaseUI {\n        for (let i = 0; i < this.uiList.length; ++i) {\n            if (this.uiList[i].tag === uiClass) {\n                return this.uiList[i];\n            }\n        }\n        return null;\n    }\n\n    public async loadResSync(url: string, progressCallback: (completedCount: number, totalCount: number, item: any) => void, completeCallback: ((error: Error, resource: any) => void) | null): Promise<any> {\n        return new Promise((resolve, reject) => {\n            cc.loader.loadRes(url, progressCallback, (error, resource) => {\n                completeCallback && completeCallback(error, resource);\n                resolve();\n            });\n        });\n    }\n\n}","export default class UserCommand extends puremvc.SimpleCommand implements puremvc.ICommand {\n\n    public constructor() {\n        super();\n    }\n\n    public static NAME: string = 'UserCommand';\n\n    /**\n     * 注册消息\n     */\n    public register(): void {\n    }\n\n    public execute(notification: puremvc.INotification): void {\n        const data: any = notification.getBody();\n        switch (notification.getName()) {\n\n        }\n    }\n}","import { UserVO } from \"./vo/UserVO\";\n\nexport default class UserProxy extends puremvc.Proxy implements puremvc.IProxy {\n    public static NAME: string = \"UserProxy\";\n    private static instance: UserProxy = null;\n    private user: UserVO = null;\n\n    public static getInstance() {\n        if (!this.instance) {\n            this.instance = new UserProxy();\n        }\n        return this.instance;\n    }\n\n    public constructor() {\n        super(UserProxy.NAME);\n        this.user = new UserVO();\n    }\n\n    // 设置用户信息\n    public setUserInfo(userInfo: any) {\n        this.user.avatarUrl = userInfo.avatarUrl;\n        this.user.nickName = userInfo.nickName;\n        this.user.city = userInfo.city;\n        this.user.country = userInfo.country;\n        this.user.gender = userInfo.gender;\n        this.user.province = userInfo.province;\n    }\n\n    public getUserInfo() {\n        return {\n            avatarUrl: this.user.avatarUrl,\n            nickName: this.user.nickName,\n        };\n    }\n\n    // 设置唯一标识\n    public setOpenId(openId: string) {\n        this.user.openId = openId;\n    }\n\n    public getOpenId() {\n        return this.user.openId;\n        // return cc.sys.platform + this.user.openId;\n    }\n\n    // 设置玩家id\n    public setPlayerId(playerId: string) {\n        this.user.playerId = playerId;\n    }\n\n    public getPlayerId() {\n        return this.user.playerId;\n    }\n\n    // 设置菜单模式\n    public setModeType(modeType: number) {\n        this.user.modeType = modeType;\n    }\n\n    public getModeType() {\n        return this.user.modeType;\n    }\n\n    // 设置启动信息\n    public setLaunch(launch) {\n        this.user.launch = launch;\n    }\n\n    public getLaunch() {\n        if (this.user.launch) {\n            return {\n                query: this.user.launch.query,\n                scene: this.user.launch.scene,\n            }\n        }\n    }\n}","export class UserVO {\n    // 微信后台用户唯一标识\n    public openId: string;\n    // MGOBE后台生成的玩家ID\n    public playerId: string;\n    // 用户启动信息\n    public launch: { query, scene } = null;\n\n    // 用户个人资料\n    /** 昵称 */\n    public nickName: string;\n    /** 头像url */\n    public avatarUrl: string;\n    /** 性别 0：未知、1：男、2：女  */\n    public gender: number;\n    /** 省份 */\n    public province: string;\n    /** 城市 */\n    public city: string;\n    /** 国家 */\n    public country: string;\n\n    // 菜单场景当前模式 2人、4人\n    public modeType: number = 2;\n\n    public constructor() {\n    }\n}","import { GameType, Scene } from \"../Constants\";\n\nexport default class Util {\n    /**\n     * js截取字符串，中英文都能用\n     * @param str：需要截取的字符串\n     * @param len: 需要截取的长度\n     */\n    static cutstr(str, len) {\n        let  str_length = 0;\n        let str_cut = new String();\n        let str_len = str.length;\n        for (let i = 0; i < str_len; i++) {\n            let a = str.charAt(i);\n            str_length++;\n            if (escape(a).length > 4) {\n                //中文字符的长度经编码之后大于4\n                str_length++;\n            }\n            str_cut = str_cut.concat(a);\n            if (str_length >= len) {\n                str_cut = str_cut.concat(\"...\");\n                return str_cut;\n            }\n        }\n        //如果给定字符串小于指定长度，则返回源字符串；\n        if (str_length < len) {\n            return str;\n        }\n    }\n\n    static getPlayerCntByType(gameType: GameType): number {\n        if(gameType == GameType.MACHINE2 || gameType == GameType.MATCH2\n            || gameType == GameType.TEAM2) {\n            return 2;\n        } else {\n            return 4;\n        }\n    }\n\n    static loadScene(scene: Scene) {\n        cc.director.preloadScene(scene, function () {\n            cc.log(\"Next scene preloaded:\", scene);\n        });\n        cc.director.loadScene(scene);\n    }\n\n    static random(min, max) {\n        return Math.round(Math.random() * (max - min)) + min;\n    }\n\n}","import { IPlatform } from \"./IPlatform\";\nimport { wxApi } from \"../../library/wechat/wxApi\";\n\nexport default class WXPlatform implements IPlatform {\n    async getOpenID() {\n        console.log(\"get openId\");\n        try {\n            let res = await wxApi.login();\n            console.log(\"login succ\", res.code, res);\n\n            res = await wxApi.callFunction(\"login\");\n            console.log(\"call login succ\", res);\n            return res.result.openid;\n        } catch (e) {\n            console.log(\"call login fail\", e);\n            return \"\";\n        }\n    }\n\n    async authSettingOfUserInfo() {\n        let isAuthorize = await wxApi.authSettingOfUserInfo();\n        return isAuthorize;\n    }\n\n    async createUserInfoButton() {\n        /** 创建登陆按钮 */\n        let x = window.innerWidth / 2 - 250 / 2;\n        let y = window.innerHeight / 1.2;\n        let button = wx.createUserInfoButton({\n            type: \"text\",\n            text: \"微信登陆\",\n            image: \"\",\n            style: {\n                left: x,\n                top: y,\n                width: 250,\n                height: 43,\n                lineHeight: 43,\n                backgroundColor: \"#FC3768\",\n                color: \"#ffffff\",\n                textAlign: \"center\",\n                fontSize: 18,\n                borderRadius: 4\n            }\n        });\n        /** 用户点击登陆按钮后获取userInfo */\n        await new Promise(resolve => {\n            button.onTap((res) => {\n                console.log(\"authorize finish:\", res);\n                if (res.userInfo) {\n                    button.destroy();\n                    resolve();\n                }\n            });\n        });\n    }\n\n    async getUserInfo() {\n        let res = await wxApi.getUserInfo(false, \"zh_CN\");\n        return res.userInfo;\n    }\n\n    async shareAppMessage(title: string, imageUrl: string, imageUrlId: string, query: string) {\n        wx.shareAppMessage({\n            title: title,\n            imageUrlId: imageUrlId,\n            imageUrl: imageUrl,\n            query: query,\n        });\n    }\n\n    async getLaunchOption() {\n        let res = wx.getLaunchOptionsSync();\n        if (res && res.query) {\n            return {\n                query: res.query,\n                scene: res.scene,\n            };\n        }\n    }\n\n    getLaunchOptionOnShow(callback: (query: any, scene: any) => any) {\n        wx.onShow((res) => {\n            if (res && res.query && res.scene) {\n                callback && callback(res.query, res.scene);\n            }\n        });\n\n    }\n\n    async showLoading(title: string = \"加载中\", isMask: boolean = true) {\n        wx.showLoading({\n            title: title,\n            mask: isMask\n        });\n    }\n\n    async hideLoading() {\n        wx.hideLoading({\n        });\n    }\n\n    async showToast(title: string, duration: any = 1000) {\n        wx.showToast({\n            title: title,\n            icon: 'none',\n            duration: duration,\n        });\n    }\n\n    async hideToast() {\n        wx.hideToast({\n        });\n    }\n\n    showModal(title: string, callback: (isConfirm: boolean) => any, content: string = \"\", showCancel: any = true, confirmText: any = \"确定\",\n        cancelText: any = \"取消\") {\n        wx.showModal({\n            title: title,\n            content: content,\n            showCancel: showCancel,\n            confirmText: confirmText,\n            cancelText: cancelText,\n            success(res) {\n                if (res.confirm) {\n                    callback(true);\n                    // wx.hid\n                } else if (res.cancel) {\n                    callback(false);\n                }\n            }\n        });\n    }\n\n    hideModal() {\n\n    }\n}","import { Scene, Config, RoomNotification, WorldNotification } from \"../Constants\";\nimport UserProxy from \"../model/UserProxy\";\nimport { Platform } from \"../services/platform/IPlatform\";\nimport MgobeService from \"../services/mgobe/MgobeService\";\nimport RoomProxy from \"../model/RoomProxy\";\nimport { UIManager } from \"../manager/UIManager\";\nimport MenuView from \"./component/MenuView\";\nimport { WelcomeView } from \"./component/WelcomeView\";\nimport { Tip } from \"./component/Tip\";\n\nexport default class WelcomeViewMediator extends puremvc.Mediator implements puremvc.IMediator {\n    public static NAME: string = \"WelcomeViewMediator\";\n\n    public constructor(viewComponent: any) {\n        super(WelcomeViewMediator.NAME, viewComponent);\n    }\n\n    public listNotificationInterests(): string[] {\n        return [\n        ];\n    }\n\n    public handleNotification(notification: puremvc.INotification): void {\n        const data = notification.getBody();\n        switch (notification.getName()) {\n        }\n    }\n\n    public onRegister(): void {\n        this.initialization();\n        this.registerOnShow();\n    }\n\n    public onRemove(): void {\n    }\n\n    public async initialization() {\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        await UIManager.getInstance().showLoadingSync(false);\n\n        // 获取 用户唯一标识\n        let openId = await Platform().getOpenID();\n        if(openId == \"\") {\n            Platform().showModal(\"提示\", (isConfirm) => {\n                if(isConfirm) {\n                    this.initialization();\n                }\n            }, \"游戏初始化失败，确认重试?\", false, \"确认\");\n            return;\n        }\n        userProxy.setOpenId(openId);\n\n\n        let isAuthorize = await Platform().authSettingOfUserInfo();\n        if (isAuthorize) {\n            console.log('authorize already');\n        } else {\n            console.log(\"authorize wait\");\n            UIManager.getInstance().hideLoading();\n            await Platform().createUserInfoButton();\n            await UIManager.getInstance().showLoadingSync(false);\n        }\n\n        // 获取用户信息\n        if (!userProxy.getUserInfo().avatarUrl) {\n            let userInfo = await Platform().getUserInfo();\n            userProxy.setUserInfo(userInfo);\n        }\n\n        // 初始化 Mgobe SDK\n        MgobeService.initMgobeSDK(userProxy.getOpenId(), Config.MGOBEGameId, Config.MGOBESecretKey,\n            Config.MGOBEHost, \"\", (res: { code: MGOBE.ErrCode }) => {\n                if (res.code === MGOBE.ErrCode.EC_OK) {\n                    console.log(\"初始化SDK成功\", MGOBE.Player.id);\n                    userProxy.setPlayerId(MGOBE.Player.id);\n                    // 获取启动参数\n                    this.loadLaunchOption();\n                    // 初始化成功，跳转到主界面\n                    UIManager.getInstance().openUISync(MenuView, 0, () => {\n                        UIManager.getInstance().hideLoading();\n                        UIManager.getInstance().closeUI(WelcomeView);\n                    });\n                } else {\n                    console.log(\"初始化SDK失败\");\n                    Platform().showModal(\"提示\", (isConfirm) => {\n                        if(isConfirm) {\n                            this.initialization();\n                        }\n                    }, \"游戏启动失败，确认重试?\", false, \"确认\");\n                }\n            });\n    }\n\n    // 启动时，获取launch参数\n    async loadLaunchOption() {\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        let res = await Platform().getLaunchOption();\n        console.log(\"启动时，获取launch参数\", res);\n        if (res) {\n            userProxy.setLaunch(res);\n        }\n    }\n\n    async registerOnShow() {\n        const userProxy = this.facade.retrieveProxy(UserProxy.NAME) as UserProxy;\n\n        Platform().getLaunchOptionOnShow((query:any, scene:any) => {\n            console.log(\"再次进入界面OnShow\", query, scene);\n            userProxy.setLaunch({query: query, scene: scene});\n            this.facade.sendNotification(WorldNotification.RUN_LAUNCH);\n        });\n    }\n}","import { BaseUI } from \"./BaseUI\";\nimport WelcomeViewMediator from \"../WelcomeViewMediator\";\nimport AppFacade from \"../../AppFacade\";\nimport { ProjectConfig } from \"../../Constants\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class WelcomeView extends BaseUI {\n\n    public static NAME = \"WelcomeView\";\n\n    static getUrl():string {\n        return ProjectConfig.PREFAB_UI_DIR + WelcomeView.NAME;\n    }\n\n    start() {\n        AppFacade.getInstance().registerMediator(new WelcomeViewMediator(this));\n    }\n\n    public onDestroy() {\n        AppFacade.getInstance().removeMediator(WelcomeViewMediator.NAME);\n    }\n\n    onLoad() {\n    }\n\n}","import { Config } from \"../../Constants\";\n\nexport class wxApi {\n    static async login(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            wx.login({\n                success: function (code) {\n                    resolve(code);\n                },\n                fail: function (...args) {\n                    reject(...args);\n                },\n                complete: function () {\n                },\n            })\n        });\n    }\n\n    static async callFunction(name: string): Promise<any> {\n        // 在调用云开发各 API 前，需先调用初始化方法 init 一次（全局只需一次，多次调用时只有第一次生效）\n        wx.cloud.init({\n            env: Config.WXCloudEnvID,\n        })\n        return new Promise((resolve, reject) => {\n            wx.cloud.callFunction({\n                name: name,\n                success: function (res) {\n                    resolve(res);\n                },\n                fail: function () {\n                    reject();\n                },\n                complete: function () {\n                },\n            });\n        });\n    }\n\n    static async checkSession(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            console.log(\"wx checksession\");\n            wx.checkSession({\n                success: function () {\n                    resolve();\n                },\n                fail: function () {\n                    reject();\n                },\n                complete: function () {\n                },\n            });\n        });\n    }\n\n    static async authorize(scope: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            wx.authorize({\n                scope: scope,\n                success: function (res) {\n                    resolve(res);\n                },\n                fail: function (res) {\n                    reject(res);\n                }\n            })\n        });\n    }\n\n    static async getUserInfo(withCredentials: boolean, lang?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            wx.getUserInfo({\n                withCredentials: withCredentials,\n                lang: lang,\n                success: function (res) {\n                    resolve(res);\n                },\n                fail: function (res) {\n                    reject(res)\n                }\n            })\n        });\n    }\n\n    static async getSetting(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            wx.getSetting({\n                success: function (res) {\n                    resolve(res);\n                },\n                fail: function () {\n                    reject();\n                }\n            });\n        });\n    }\n\n    static async authSettingOfUserInfo(): Promise<boolean> {\n        return new Promise<boolean>(async (resolve, reject) => {\n            try {\n                let res = await wxApi.getSetting();\n                if (res.authSetting && res.authSetting['scope.userInfo']) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            } catch (e) {\n                resolve(false);\n            }\n        });\n    }\n\n\n    // static showLoading(title: string = \"\") {\n    //     wx.showLoading({\n    //         title: title,\n    //         mask: true\n    //     });\n    // }\n\n    // static hideLoading() {\n    //     wx.hideLoading({\n    //     });\n    // }\n\n    // static showToast(title: string, duration: any = 1000) {\n    //     wx.showToast({\n    //         title: title,\n    //         icon: 'success',\n    //         duration: duration,\n    //     });\n    // }\n\n    // static hideLoading() {\n    //     wx.hideLoading({\n    //     });\n    // }\n\n\n\n\n\n    static getUserGameLabel() {\n\n    }\n}\n"],"file":"project.js"}