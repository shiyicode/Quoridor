{
  "__type__": "cc.TextAsset",
  "_name": "MGOBE.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare namespace MGOBE {\n    /********************************* 玩家信息 ************************************/\n    /**\n     * @name 玩家信息\n     * @description 该对象记录了玩家的基本信息，默认全部为空。成功初始化Listener之后，id、openId 属性将生效。\n     * @description 玩家进入房间后，该对象的属性与 roomInfo.playerList 中当前玩家信息保持一致。\n     * @description 玩家 ID 是 MGOBE 后台生成的 ID，openId 是开发者初始化时候使用的 ID。openId 只有初始化 Listener 的时候使用，其它接口的“玩家 ID”均指后台生成的 ID。\n     * @field {string}  id  玩家ID\n     * @field {string}  openId  玩家openId\n     * @field {string}  name  玩家昵称\n     * @field {string}  teamId  队伍ID\n     * @field {number}  customPlayerStatus  自定义玩家状态\n     * @field {string}  customProfile  自定义玩家属性\n     * @field {MGOBE.types.NetworkState}  commonNetworkState  房间网络状态\n     * @field {MGOBE.types.NetworkState}  relayNetworkState  帧同步网络状态\n     */\n    export const Player: {\n        readonly id: string;\n        readonly openId: string;\n        readonly name: string;\n        readonly teamId: string;\n        readonly customPlayerStatus: number;\n        readonly customProfile: string;\n        readonly commonNetworkState: MGOBE.types.NetworkState;\n        readonly relayNetworkState: MGOBE.types.NetworkState;\n    };\n\n    /********************************* SDK 枚举 *********************************/\n    /**\n     * @name 操作类型枚举\n     * @enum {MGOBE.types.CreateRoomType}  CreateRoomType  创建房间方式\n     * @enum {MGOBE.types.MatchType}  MatchType  匹配类型\n     * @enum {MGOBE.types.NetworkState}  NetworkState  网络状态\n     * @enum {MGOBE.types.FrameSyncState}  FrameSyncState  房间帧同步状态\n     * @enum {MGOBE.types.RecvType}  RecvType  消息接收者范围\n     */\n    export const ENUM: {\n        readonly CreateRoomType: typeof MGOBE.types.CreateRoomType;\n        readonly MatchType: typeof MGOBE.types.MatchType;\n        readonly NetworkState: typeof MGOBE.types.NetworkState;\n        readonly FrameSyncState: typeof MGOBE.types.FrameSyncState;\n        readonly RecvType: typeof MGOBE.types.RecvType;\n    };\n\n    /********************************* SDK 随机数工具 *********************************/\n    export const RandomUtil: {\n        /**\n         * @name 初始化随机数\n         * @description init 方法接受一个 seed 为参数，RandomUtil 在后续生成随机数的过程中将以 seed 为种子。使用相同的 seed 初始化，调用 random 方法生成的随机数序列相同。\n         * @param {number} seed 随机数种子\n         * @returns {void}\n         */\n        init(seed: number): void;\n        /**\n         * @name 生成随机数\n         * @description 如果种子相同、初始化后调用次数相同，生成的随机数将相同。\n         * @returns {number} 随机数\n         */\n        random(): number;\n    };\n\n    /********************************* SDK 日志打印 ************************************/\n    export class DebuggerLog {\n        static enable: boolean;\n        static callback: (...logs: any[]) => any;\n    }\n\n    export const StatCallbacks: {\n        onPingTime(time: number): any;\n        onFitFrameTime(deltaTime: number): any;\n        onBstFrameRate(deltaTime: number): any;\n        onRenderFrameRate(deltaTime: number): any;\n    };\n\n    /********************************* Room 广播回调 *********************************/\n    class RoomBroadcastHandler {\n        /**\n         * @name 匹配结束广播\n         * @description onMatch 广播表示组队匹配结束。匹配成功或者匹配超时后，全部小组成员都会收到该广播。\n         * @description 使用 event.data.errCode 判断是否匹配成功。\n         * @description 注意该方法为 Room 类的静态方法。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.MatchBst>} event 回调参数\n         * @returns {void}\n         */\n        static onMatch: (event: MGOBE.types.BroadcastEvent<MGOBE.types.MatchBst>) => any;\n        /**\n         * @name 组队匹配超时广播\n         * @description onCancelMatch 广播表示取消组队匹配。全部小组成员都会收到该广播。\n         * @description 注意该方法为 Room 类的静态方法。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.CancelMatchBst>} event 回调参数\n         * @returns {void}\n         */\n        static onCancelMatch: (event: MGOBE.types.BroadcastEvent<MGOBE.types.CancelMatchBst>) => any;\n        /**\n         * @name 新玩家加入房间广播回调接口\n         * @description onJoinRoom 广播表示该房间有新玩家加入。房间内全部成员都会收到该广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.JoinRoomBst>} event 回调参数\n         * @returns {void}\n         */\n        onJoinRoom: (event: MGOBE.types.BroadcastEvent<MGOBE.types.JoinRoomBst>) => any;\n        /**\n         * @name 玩家退出房间广播回调接口\n         * @description onLeaveRoom 广播表示该房间有玩家退出。房间内全部成员都会收到该广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.LeaveRoomBst>} event 回调参数\n         * @returns {void}\n         */\n        onLeaveRoom: (event: MGOBE.types.BroadcastEvent<MGOBE.types.LeaveRoomBst>) => any;\n        /**\n         * @name 房间被解散广播回调接口\n         * @description onDismissRoom 广播表示房主解散了该房间。房间内全部成员都会收到该广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.DismissRoomBst>} event 回调参数\n         * @returns {void}\n         */\n        onDismissRoom: (event: MGOBE.types.BroadcastEvent<MGOBE.types.DismissRoomBst>) => any;\n        /**\n         * @name 房主修改房间信息广播回调接口\n         * @description onChangeRoom 广播表示房主修改了该房间属性。房间内全部成员都会收到该广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.ChangeRoomBst>} event 回调参数\n         * @returns {void}\n         */\n        onChangeRoom: (event: MGOBE.types.BroadcastEvent<MGOBE.types.ChangeRoomBst>) => any;\n        /**\n         * @name 房间内玩家被移除广播回调接口\n         * @description onRemovePlayer 广播表示有玩家被房主移除。房间内全部成员都会收到该广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.RemovePlayerBst>} event 回调参数\n         * @returns {void}\n         */\n        onRemovePlayer: (event: MGOBE.types.BroadcastEvent<MGOBE.types.RemovePlayerBst>) => any;\n        /**\n         * @name 收到房间内其他玩家消息广播回调接口\n         * @description onRecvFromClient 广播表示收到来自 ID 为 sendPlayerId 的玩家消息。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.RecvFromClientBst>} event 回调参数\n         * @returns {void}\n         */\n        onRecvFromClient: (event: MGOBE.types.BroadcastEvent<MGOBE.types.RecvFromClientBst>) => any;\n        /**\n         * @name 收到自定义服务消息广播回调接口\n         * @description onRecvFromGameSvr 广播表示收到来自自定义服务的消息。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.RecvFromGameSvrBst>} event 回调参数\n         * @returns {void}\n         */\n        onRecvFromGameSvr: (event: MGOBE.types.BroadcastEvent<MGOBE.types.RecvFromGameSvrBst>) => any;\n        /**\n         * @name 房间内玩家网络状态变化广播回调接口\n         * @description onChangePlayerNetworkState 广播表示 ID 为 changePlayerId 的玩家网络状态发生变化。\n         * @description 玩家在房间中、帧同步中的网络变化都会触发该广播，因此 networkState 将有四中情况，分别表示房间中上下线、帧同步中上下线。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.ChangePlayerNetworkStateBst>} event 回调参数\n         * @returns {void}\n         */\n        onChangePlayerNetworkState: (event: MGOBE.types.BroadcastEvent<MGOBE.types.ChangePlayerNetworkStateBst>) => any;\n        /**\n         * @name 玩家自定义状态变化广播回调接口\n         * @description onChangeCustomPlayerStatus 广播表示房间内 ID 为 changePlayerId 的玩家状态发生变化。玩家状态由开发者自定义。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.ChangeCustomPlayerStatusBst>} event 回调参数\n         * @returns {void}\n         */\n        onChangeCustomPlayerStatus: (event: MGOBE.types.BroadcastEvent<MGOBE.types.ChangeCustomPlayerStatusBst>) => any;\n        /**\n         * @name 开始帧同步广播回调接口\n         * @description onStartFrameSync 广播表示房间开始帧同步。收到该广播后将持续收到 onRecvFrame 广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.StartFrameSyncBst>} event 回调参数\n         * @returns {void}\n         */\n        onStartFrameSync: (event: MGOBE.types.BroadcastEvent<MGOBE.types.StartFrameSyncBst>) => any;\n        /**\n         * @name 停止帧同步广播回调接口\n         * @description onStopFrameSync 广播表示房间停止帧同步。收到该广播后将不再收到 onRecvFrame 广播。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.StopFrameSyncBst>} event 回调参数\n         * @returns {void}\n         */\n        onStopFrameSync: (event: MGOBE.types.BroadcastEvent<MGOBE.types.StopFrameSyncBst>) => any;\n        /**\n         * @name 房间帧消息广播回调接口\n         * @description onRecvFrame 广播表示收到一个帧 frame，frame 的内容由多个 MGOBE.types.FrameItem 组成，即一帧时间内房间内所有玩家向服务器发送帧消息的集合。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.RecvFrameBst>} event 回调参数\n         * @returns {void}\n         */\n        onRecvFrame: (event: MGOBE.types.BroadcastEvent<MGOBE.types.RecvFrameBst>) => any;\n        /**\n         * @name 自动补帧失败回调接口\n         * @description onAutoRequestFrameError 表示自动补帧失败，在初始化 Listener 时开启自动补帧后才能触发。\n         * @description 发生补帧失败后，将不能收到帧广播，开发者可以使用 retryAutoRequestFrame 方法重试自动补帧。\n         * @param {MGOBE.types.BroadcastEvent<MGOBE.types.ResponseEvent<MGOBE.types.RequestFrameRsp>>} event 回调参数\n         * @returns {void}\n         */\n        onAutoRequestFrameError: (event: MGOBE.types.BroadcastEvent<MGOBE.types.ResponseEvent<MGOBE.types.RequestFrameRsp>>) => any;\n    }\n    /********************************* SDK Room对象 *********************************/\n    export class Room extends RoomBroadcastHandler {\n\n        /**\n         * @name 构造器\n         * @description 实例化 Room 对象时可以传入一个 MGOBE.types.RoomInfo 对象 roomInfo，后续接口调用都将基于该 roomInfo，例如修改该房间的属性、接收该房间的广播。\n         * @description 如果不传 roomInfo 参数，开发者可以通过直接调用 initRoom、createRoom、joinRoom 等方法获取 roomInfo。\n         * @description Room 对象会自动维护内部的 roomInfo 属性保持最新，开发者可以直接通过访问该属性获得最新的房间信息。\n         * @param {MGOBE.types.RoomInfo} roomInfo 房间信息（可选）\n         * @returns {void}\n         */\n        constructor(roomInfo?: MGOBE.types.RoomInfo);\n        /**\n         * @name 房间信息\n         * @description roomInfo 为 Room 实例的属性，类型为 MGOBE.types.RoomInfo，调用 Room 相关的接口会导致该属性发生变化。\n         */\n        roomInfo: MGOBE.types.RoomInfo;\n        /**\n         * @name 获取房间列表\n         * @description 调用结果将在 callback 中异步返回。\n         * @description 该接口为 Room 的静态方法，只能通过 Room.getRoomList 方式调用，Room 实例无法直接访问该方法。\n         * @param {MGOBE.types.GetRoomListPara} getRoomListPara  获取房间列表参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.GetRoomListRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        static getRoomList(getRoomListPara: MGOBE.types.GetRoomListPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.GetRoomListRsp>): void;\n        /**\n         * @name 根据房间 ID 获取房间\n         * @description 调用结果将在 callback 中异步返回。\n         * @description 该接口为 Room 的静态方法，只能通过 Room.getRoomByRoomId 方式调用，Room 实例无法直接访问该方法。\n         * @description 如果参数中的 roomId 为空字符串，将查询玩家所在的房间。\n         * @param {MGOBE.types.GetRoomByRoomIdPara} getRoomByRoomIdPara  获取房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        static getRoomByRoomId(getRoomByRoomIdPara: MGOBE.types.GetRoomByRoomIdPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>): void;\n        /**\n         * @name 查询玩家所在的房间信息\n         * @description 调用结果将在 callback 中异步返回。\n         * @description 该接口为 Room 的静态方法，只能通过 Room.getMyRoom 方式调用，Room 实例无法直接访问该方法。\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        static getMyRoom(callback?: MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>): void;\n        /**\n         * @name 初始化 Room 实例的房间信息，即更新 roomInfo 属性\n         * @description initRoom 会更新 Room 实例的 roomInfo，接受 MGOBE.types.RoomInfo 或 { id: string; } 类型的参数。\n         * @description 如果不传参数，该方法将清空 Room 实例的 roomInfo 属性，此时调用 getRoomDetail 方法将查询玩家所在的房间。\n         * @description 当玩家需要加入指定 id 房间时，需要使用该接口初始化 Room 实例的 roomInfo 属性，然后才能通过调用 joinRoom 方法加入该 Room 实例所代表的房间。\n         * @param {MGOBE.types.RoomInfo 或 { id: string }} roomInfo  初始化参数，id表示房间id\n         * @returns {void}\n         */\n        initRoom(roomInfo?: MGOBE.types.RoomInfo | {\n            id: string;\n        }): void;\n        /**\n         * @name 房间信息更新回调接口\n         * @description onUpdate 表明 Room 实例的 roomInfo 信息发生变化，这种变化原因包括各种房间操作、房间广播、本地网络状态变化等。\n         * @description 开发者可以在该接口中更新游戏画面，或者使用 networkState 属性判断网络状态。\n         * @param {Room} room 更新的Room实例（可选）\n         * @returns {void}\n         */\n        onUpdate(room?: Room): void;\n        /**\n         * @name 该属性为只读属性，用于获取客户端本地 SDK 网络状态\n         * @description 该属性类型为 ```{ COMMON: boolean, RELAY: boolean }``` 。COMMON 表示房间网络状态；RELAY 表示帧同步网络状态。为 true 时表示网络已连接，为 false 时表示网络未连接。\n         * @description 该网络状态与玩家信息中的网络状态（Player.commonNetworkState/Player.relayNetworkState）概念不同，前者表示本地 socket 状态，后者表示玩家在 MGOBE 后台中的状态。\n         * @description 本地 socket 网络状态变化时，onUpdate 将被触发。\n         */\n        readonly networkState: {\n            COMMON: boolean;\n            RELAY: boolean;\n        };\n        /**\n         * @name 创建房间\n         * @description createRoom 调用结果将在 callback 中异步返回。操作成功后，roomInfo 属性将更新。\n         * @description 创建房间成功后，玩家自动进入该房间，因此无法继续调用 joinRoom、matchPlayers 等方法，可以利用房间ID邀请其他玩家进入该房间。\n         * @param {MGOBE.types.CreateRoomPara} createRoomPara  创建房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.CreateRoomRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        createRoom(createRoomPara: MGOBE.types.CreateRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.CreateRoomRsp>): void;\n        /**\n         * @name 创建团队房间\n         * @description createTeamRoom 调用结果将在 callback 中异步返回。操作成功后，roomInfo 属性将更新。\n         * @description 创建房间成功后，玩家自动进入该房间，因此无法继续调用 joinRoom、matchPlayers 等方法。\n         * @description 参数中的“房间最大玩家数量”要求能被“队伍数量”整除，创建成功后每个队伍的“队伍最小人数”为1，“队伍最大人数”为整除结果。\n         * @param {MGOBE.types.CreateTeamRoomPara} createTeamRoomPara  创建团队房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.CreateRoomRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        createTeamRoom(createTeamRoomPara: MGOBE.types.CreateTeamRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.CreateRoomRsp>): void;\n        /**\n         * @name 加入房间\n         * @description joinRoom 调用结果将在 callback 中异步返回。\n         * @description 该接口加入的房间是 Room 实例所代表的房间，如果该 Room 实例的 roomInfo 不存在 roomId，则需要使用 roomId 通过 init 方法初始化 Room 实例。\n         * @description 加房成功后，房间内全部成员都会收到一条玩家加入房间广播 onJoinRoom，roomInfo 属性将更新。\n         * @param {MGOBE.types.JoinRoomPara} joinRoomPara  加入房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.JoinRoomRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        joinRoom(joinRoomPara: MGOBE.types.JoinRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.JoinRoomRsp>): void;\n        /**\n         * @name 加入团队房间\n         * @description joinTeamRoom 调用结果将在 callback 中异步返回。\n         * @description 与 joinRoom 类似，该接口加入的房间是 Room 实例所代表的房间。teamId 为 roomInfo.teamList 中定义的队伍 ID。\n         * @param {MGOBE.types.JoinTeamRoomPara} joinTeamRoomPara  加入团队房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.JoinRoomRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        joinTeamRoom(joinTeamRoomPara: MGOBE.types.JoinTeamRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.JoinRoomRsp>): void;\n        /**\n         * @name 退出房间\n         * @description leaveRoom 调用结果将在 callback 中异步返回。退出成功后，房间内剩余成员都会收到一条玩家退出房间广播 onLeaveRoom，roomInfo 属性将更新，roomInfo.playerList 中将没有该玩家信息。\n         * @description 退房后，如果房间内还剩下其他玩家，则该 room 实例仍然代表退房前的房间，可以继续调用 room.initRoom() 清除房间信息。\n         * @param {object} para  预留参数，传{}即可\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.LeaveRoomRsp>} callback 响应回调函数\n         * @returns {void}\n         */\n        leaveRoom(para: {}, callback?: MGOBE.types.ReqCallback<MGOBE.types.LeaveRoomRsp>): void;\n        /**\n         * @name 解散房间\n         * @description dismissRoom 调用结果将在 callback 中异步返回。解散成功后，房间内全部成员都会收到一条解散房间广播 onDismissRoom，roomInfo 属性将更新。\n         * @description 只有房主有权限解散房间\n         * @param {object} para  预留参数，传{}即可\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.DismissRoomRsp>} callback 响应回调函数\n         * @returns {void}\n         */\n        dismissRoom(para: {}, callback?: MGOBE.types.ReqCallback<MGOBE.types.DismissRoomRsp>): void;\n        /**\n         * @name 修改房间信息\n         * @description changeRoom 调用结果将在 callback 中异步返回。修改成功后，房间内全部成员都会收到一条修改房间广播 onChangeRoom，roomInfo 属性将更新。\n         * @description 只有房主有权限修改房间\n         * @param {MGOBE.types.ChangeRoomPara} changeRoomPara  修改房间参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.ChangeRoomRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        changeRoom(changeRoomPara: MGOBE.types.ChangeRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.ChangeRoomRsp>): void;\n        /**\n         * @name 修改玩家自定义状态\n         * @description 修改玩家状态是修改 PlayerInfo 中的 customPlayerStatus 字段，玩家的状态由开发者自定义。\n         * @description 修改成功后，房间内全部成员都会收到一条修改玩家状态广播 onChangeCustomPlayerStatus，roomInfo 属性将更新。\n         * @description 每个玩家只能修改自己的状态，调用结果将在 callback 中异步返回。\n         * @param {MGOBE.types.ChangeCustomPlayerStatusPara} changeCustomPlayerStatusPara  修改玩家状态参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.ChangeCustomPlayerStatusRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        changeCustomPlayerStatus(changeCustomPlayerStatusPara: MGOBE.types.ChangeCustomPlayerStatusPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.ChangeCustomPlayerStatusRsp>): void;\n        /**\n         * @name 移除房间内玩家\n         * @description 调用结果将在 callback 中异步返回。移除玩家成功后，房间内全部成员都会收到一条移除玩家广播 onRemovePlayer，roomInfo 属性将更新。\n         * @description 只有房主有权限移除其他玩家\n         * @param {MGOBE.types.RemovePlayerPara} removePlayerPara 移除房间内玩家参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.RemovePlayerRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        removePlayer(removePlayerPara: MGOBE.types.RemovePlayerPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.RemovePlayerRsp>): void;\n        /**\n         * @name 获取Room实例的房间信息\n         * @description 该接口获取的是 Room 实例的房间信息，调用结果将在 callback 中异步返回。\n         * @description 如果该 Room 实例中的 roomInfo 属性没有 ID，该接口将查询玩家所在的房间。\n         * @description 如果 roomInfo 属性含有 ID，则查询该 ID 对应的房间信息。\n         * @description 操作成功后，roomInfo 属性将更新。\n         * @description 如果需要获取指定 ID 的房间信息，可以使用 getRoomByRoomId 方法。\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        getRoomDetail(callback?: MGOBE.types.ReqCallback<MGOBE.types.GetRoomByRoomIdRsp>): void;\n        /**\n         * @name 多人在线匹配\n         * @description 调用该接口后将发起多人在线匹配，callback 将异步返回调用结果。返回码为0表示调用成功。\n         * @description 调用成功后，Room.onMatch、Room.onCancelMatch 将回调匹配结果。\n         * @description 该接口需要与匹配规则配合使用，因此，匹配超时时间由开发者在匹配规则中定义。开发者需要在控制台上创建匹配，得到匹配 Code 作为该方法的参数 matchCode。\n         * @description matchPlayersPara.playerInfo 中的 matchAttributes 数组对应匹配规则中定义的 playerAttributes，playerAttributes 的每一种属性都要填入 matchAttributes 中，name 表示属性名，value 表示玩家该属性的值。\n         * @param {MGOBE.types.MatchPlayersPara} matchPlayersPara  多人匹配参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.MatchPlayersRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        matchPlayers(matchPlayersPara: MGOBE.types.MatchPlayersPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.MatchPlayersRsp>): void;\n        /**\n         * @name 组队匹配\n         * @description 调用该接口后将以 playerInfoList 为小组一起进行匹配，callback 将异步返回调用结果。\n         * @description 调用成功后，Room.onMatch、Room.onCancelMatch 将回调匹配结果。小组成员都可以通过 cancelPlayerMatch 取消匹配。\n         * @description 匹配成功后，小组成员都会进入同一个房间，同一个队伍。\n         * @description 该接口需要与匹配规则配合使用，匹配超时时间由开发者在匹配规则中定义。开发者需要在控制台上创建匹配，得到匹配 Code 作为该方法的参数 matchCode。\n         * @description 根据匹配规则的不同，房间内的队伍可能包含多个小组。比如4V4的匹配（两个队伍），如果小组成员数为2，那么同一个队伍将由两个小组组成。\n         * @param {MGOBE.types.MatchGroupPara} matchGroupPara  多人匹配参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.MatchGroupRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        matchGroup(matchGroupPara: MGOBE.types.MatchGroupPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.MatchGroupRsp>): void;\n        /**\n         * @name 房间匹配\n         * @description 调用该接口后将发起房间匹配，匹配结果将在 callback 中异步返回。操作成功后，Room 对象内部 roomInfo 属性将更新。\n         * @description 房间匹配是指按照传入的参数搜索现存的房间，如果存在，则将玩家加入该房间；如果不存在，则为玩家创建并加入一个新房间。\n         * @param {MGOBE.types.MatchRoomPara} matchRoomPara  房间匹配参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.MatchRoomSimpleRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        matchRoom(matchRoomPara: MGOBE.types.MatchRoomPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.MatchRoomSimpleRsp>): void;\n        /**\n         * @name 取消玩家匹配\n         * @description 该接口作用是取消匹配请求，即 matchPlayers、matchGroup 请求。调用结果将在 callback 中异步返回。如果玩家已经在房间中，回调函数将返回 roomInfo。\n         * @description cancelMatchPara.matchType 需要设置为 MGOBE.ENUM.MatchType.PLAYER_COMPLEX。\n         * @param {MGOBE.types.CancelMatchPara} cancelMatchPara  取消匹配参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.CancelMatchRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        cancelPlayerMatch(cancelMatchPara: MGOBE.types.CancelPlayerMatchPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.CancelPlayerMatchRsp>): void;\n        /**\n         * @name 开始帧同步\n         * @description 调用结果将在 callback 中异步返回。调用成功后房间内全部成员将收到 onStartFrameSync 广播。该接口会修改房间帧同步状态为“已开始帧同步”。\n         * @description 房间内任意一个玩家成功调用该接口将导致全部玩家开始接收帧广播。\n         * @param {object} para  预留参数，传{}即可\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.StartFrameSyncRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        startFrameSync(para: {}, callback?: MGOBE.types.ReqCallback<MGOBE.types.StartFrameSyncRsp>): void;\n        /**\n         * @name 停止帧同步\n         * @description 调用结果将在 callback 中异步返回。调用成功后房间内全部成员将收到 onStopFrameSync 广播。该接口会修改房间帧同步状态为“已停止帧同步”。\n         * @description 房间内任意一个玩家成功调用该接口将导致全部玩家停止接收帧广播。\n         * @param {object} para  预留参数，传{}即可\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.StoptFrameSyncRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        stopFrameSync(para: {}, callback?: MGOBE.types.ReqCallback<MGOBE.types.StopFrameSyncRsp>): void;\n        /**\n         * @name 发送帧同步数据\n         * @description 帧数据内容 data 类型为普通 object，由开发者自定义，目前支持最大长度不超过1k。\n         * @description 后台将集合全部玩家的帧数据，并以一定时间间隔（由房间帧率定义）通过 onRecvFrame 广播给各客户端。调用结果将在 callback 中异步返回。\n         * @description 只有房间处于“已开始帧同步”状态才能调用该接口。\n         * @param {MGOBE.types.SendFramePara} sendFramePara  发送帧同步数据参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.SendFrameRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        sendFrame(sendFramePara: MGOBE.types.SendFramePara, callback?: MGOBE.types.ReqCallback<MGOBE.types.SendFrameRsp>): void;\n        /**\n         * @name 请求补帧\n         * @description 调用结果将在 callback 中异步返回。\n         * @param {MGOBE.types.RequestFramePara} requestFramePara  请求补帧参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.RequestFrameRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        requestFrame(requestFramePara: MGOBE.types.RequestFramePara, callback?: MGOBE.types.ReqCallback<MGOBE.types.RequestFrameRsp>): void;\n        /**\n         * @name 重试自动补帧\n         * @description 当收到 onAutoRequestFrameError 回调时，表示自动补帧失败，可以使用该方法重新触发自动补帧。\n         * @returns {void}\n         */\n        retryAutoRequestFrame(): void;\n        /**\n         * @name 发送消息给房间内玩家\n         * @description 调用结果将在 callback 中异步返回。调用成功后所指定的接收消息的玩家将收到 onRecvFromClient 广播。\n         * @description 当 recvType 值为 1 （即 ROOM_ALL ） 时，房间内全部玩家将收到消息；\n         * @description 当 recvType 值为 2 （即 ROOM_OTHERS ） 时，房间内除消息发送者外的其他玩家将收到消息；\n         * @description 当 recvType 值为 3 （即 ROOM_SOME ） 时，接收消息玩家才由 recvPlayerList 决定。\n         * @param {MGOBE.types.SendToClientPara} sendToClientPara  发送消息参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.SendToClientRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        sendToClient(sendToClientPara: MGOBE.types.SendToClientPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.SendToClientRsp>): void;\n        /**\n         * @name 发送消息给实时服务器\n         * @description 该接口只能在玩家进入房间后调用，调用结果将在 callback 中异步返回。\n         * @param {MGOBE.types.SendToGameSvrPara} sendToGameSvrPara  发送消息参数\n         * @param {MGOBE.types.ReqCallback<MGOBE.types.SendToGameSvrRsp>} callback  响应回调函数\n         * @returns {void}\n         */\n        sendToGameSvr(sendToGameSvrPara: MGOBE.types.SendToGameSvrPara, callback?: MGOBE.types.ReqCallback<MGOBE.types.SendToGameSvrRsp>): void;\n    }\n    /********************************* SDK Listener对象 *********************************/\n    export class Listener {\n\n        /**\n         * @name 初始化监听器\n         * @description 该方法为静态方法。初始化 Listener 时需要传入 gameInfo 和 config 两个参数。\n         * @description 初始化结果在 callback 中异步返回，错误码为 0 表示初始化成功。\n         * @param {MGOBE.types.GameInfoPara} gameInfo  游戏信息\n         * @param {MGOBE.types.ConfigPara} config  游戏配置\n         * @param {MGOBE.types.ReqCallback<null>} callback  初始化回调函数\n         * @returns {void}\n         */\n        static init(gameInfo: MGOBE.types.GameInfoPara, config: MGOBE.types.ConfigPara, callback: MGOBE.types.ReqCallback<MGOBE.types.InitRsp>): void;\n        /**\n         * @name 为Room实例添加广播监听\n         * @description 该方法为静态方法。实例化 Room 对象之后，需要通过该方法给 Room 注册广播事件监听。\n         * @description Listener 完成初始化之后才能添加监听。\n         * @param {Room} room  需要监听的房间对象\n         * @returns {void}\n         */\n        static add(room: Room): void;\n        /**\n         * @name 为Room实例移除广播监听\n         * @description 该方法为静态方法。如果不再需要监听某个 Room 对象的广播事件，可以通过该方法进行移除。\n         * @param {Room} room  需要移除监听的房间对象\n         * @returns {void}\n         */\n        static remove(room: Room): void;\n        /**\n         * @name 移除全部Room对象的广播监听\n         * @description 该方法为静态方法。\n         * @returns {void}\n         */\n        static clear(): void;\n    }\n\n    /********************************* SDK 错误码 *********************************/\n    export enum ErrCode {\n        EC_OK = 0,\n        EC_REQ_BAD_PKG = 1,\n        EC_CMD_INVALID = 2,\n        EC_PARAMS_INVALID = 3,\n        EC_INNER_ERROR = 4,\n        EC_TIME_OUT = 5,\n        EC_SERVER_BUSY = 6,\n        EC_NO_RIGHT = 7,\n        EC_ACCESS_CMD_INVALID_ERR = 200,\n        EC_ACCESS_CMD_GET_TOKEN_ERR = 201,\n        EC_ACCESS_CMD_TOKEN_PRE_EXPIRE = 202,\n        EC_ACCESS_CMD_INVALID_TOKEN = 203,\n        EC_ACCESS_PUSH_SERIALIZE_ERR = 204,\n        EC_ACCESS_LOGIN_BODY_PARSE_ERR = 205,\n        EC_ACCESS_CONN_ERR = 206,\n        EC_ACCESS_GET_RS_IP_ERR = 207,\n        EC_ACCESS_ADD_COMM_CONN_ERR = 208,\n        EC_ACCESS_ADD_HEART_CONN_ERR = 209,\n        EC_ACCESS_ADD_RELAY_CONN_ERR = 210,\n        EC_ACCESS_HEART_BODY_PARSE_ERR = 211,\n        EC_ACCESS_GET_COMM_CONNECT_ERR = 212,\n        EC_ACCESS_GET_RELAY_CONNECT_ERR = 213,\n        EC_ACCESS_ACCESS_INFO_EMPTY = 214,\n        EC_ACCESS_PLAYER_DUPLICATE_LOGIN = 215,\n        EC_ACCESS_NOE_RELAY_OR_STATE_SVR = 216,\n        EC_PLAYER_GAME_NOT_EXIST = 10000,\n        EC_PLAYER_SECRET_KEY_FAIL = 10001,\n        EC_PLAYER_SIGN_ERR = 10002,\n        EC_PLAYER_DUPLICATE_REQ = 10003,\n        EC_PLAYER_TIMESTAMP_INVALID = 10004,\n        EC_PLAYER_QUERY_PLAYER_FAIL = 10005,\n        EC_PLAYER_ADD_PLAYER_FAIL = 10006,\n        EC_PLAYER_QUERY_GAME_FAIL = 10007,\n        EC_PLAYER_RECORD_NUM_ERR = 10008,\n        EC_PLAYER_GET_TOKEN_FAIL = 10009,\n        EC_PLAYER_TOKEN_NOT_EXIST = 10010,\n        EC_PLAYER_TOKEN_INVALID = 10011,\n        EC_PLAYER_CLEAR_TOKEN_FAIL = 10012,\n        EC_PLAYER_LOCK_FAIL = 10013,\n        EC_PLAYER_UNLOCK_FAIL = 10014,\n        EC_PLAYER_SAVE_TOKEN_FAIL = 10015,\n        EC_ROOM_CREATE_NO_PERMISSION = 20000,\n        EC_ROOM_DESTORY_NO_PERMISSION = 20001,\n        EC_ROOM_JOIN_NO_PERMISSION = 20002,\n        EC_ROOM_REMOVE_PLAYER_NO_PERMISSION = 20003,\n        EC_ROOM_MODIFY_PROPERTIES_NO_PEMISSION = 20004,\n        EC_ROOM_DISSMISS_NO_PERMISSION = 20005,\n        EC_ROOM_REMOVE_SELF_NO_PERMISSION = 20006,\n        EC_ROOM_CHECK_LOGIN_SESSION_ERR = 20007,\n        EC_ROOM_REMOVE_PLAYER_NOT_IN_ROOM = 20008,\n        EC_ROOM_PLAYER_ALREADY_IN_ROOM = 20010,\n        EC_ROOM_PLAYER_NOT_IN_ROOM = 20011,\n        EC_ROOM_PLAYERS_EXCEED_LIMIT = 20012,\n        EC_ROOM_JOIN_NOT_ALLOW = 20013,\n        EC_ROOM_MAX_PLAYERS_INVALID = 20014,\n        EC_ROOM_CREATE_FAIL = 20015,\n        EC_ROOM_PLAYER_OFFLINE = 20016,\n        EC_ROOM_PARAM_PAGE_INVALID = 20017,\n        EC_ROOM_GET_PLAYER_INFO_ERR = 20050,\n        EC_ROOM_GET_ROOM_INFO_ERR = 20051,\n        EC_ROOM_MODIFY_OWNER_ERR = 20052,\n        EC_ROOM_MAX_ROOM_NUMBER_EXCEED_LIMIT = 20053,\n        EC_ROOM_REMOVE_REDIS_PLAYER_ROOM_MATCH_ERR = -20052,\n        EC_ROOM_REMOVE_REDIS_ROOM_INFO_ERR = -20053,\n        EC_ROOM_REDIS_UPDATE_ERR = -20054,\n        EC_ROOM_REDIS_GET_LOCK_ERR = -20055,\n        EC_ROOM_REDIS_CHECK_LOCK_ERR = -20056,\n        EC_ROOM_REDIS_DEL_LOCK_ERR = -20057,\n        EC_ROOM_QUERY_PLAYER_ERR = 20060,\n        EC_ROOM_QUERY_GAME_ERR = 20061,\n        EC_ROOM_PLAYER_INFO_NOT_EXIST = 20062,\n        EC_ROOM_GAME_INFO_NOT_EXIST = 20063,\n        EC_ROOM_HISTORY_INFO_INSERT_ERR = -20064,\n        EC_ROOM_REGION_INFO_NOT_EXIST = 20065,\n        EC_ROOM_QUERY_REGION_ERR = 20066,\n        EC_ROOM_MODIFY_PLAYER_BUSY = 20070,\n        EC_ROOM_INFO_UNEXIST = 20080,\n        EC_ROOM_ALLOCATE_RELAYSVR_IP_PORT_ERR = 20090,\n        EC_ROOM_INVALID_PARAMS_TEAM_ID = 20100,\n        EC_ROOM_TEAM_MEMBER_LIMIT_EXCEED = 20101,\n        EC_ROOM_ALLOCATE_SERVICE_FAIL = -20200,\n        EC_MATCH_NO_ROOM = 30000,\n        EC_MATCH_TIMEOUT = 30001,\n        EC_MATCH_LOGIC_ERR = 30002,\n        EC_MATCH_ERR = 30010,\n        EC_MATCH_PLAYER_IS_IN_MATCH = 30011,\n        EC_MATCH_PLAYER_NOT_IN_MATCH = 30012,\n        EC_MATCH_GET_MATCH_INFO_ERR = 30013,\n        EC_MATCH_UPDATE_MATCH_INFO_ERR = 30014,\n        EC_MATCH_CANCEL_FAILED = 30015,\n        EC_MATCH_GET_PLAYER_LIST_INFO_ERR = 30016,\n        EC_MATCH_CREATE_ROOM_ERR = 30041,\n        EC_MATCH_JOIN_ROOM_ERR = 30042,\n        EC_MATCH_INVALID_PARAMS = 30043,\n        EC_MATCH_GROUP_NUM_EXCEED_LIMIT = 30044,\n        EC_MATCH_PLAYER_ID_IS_REPEATED = 30045,\n        EC_MATCH_CREATE_ROOM_PLAYER_ALREADY_IN_ROOM = 30050,\n        EC_MATCH_QUERY_PLAYER_ERR = 30100,\n        EC_MATCH_PLAYER_INFO_NOT_EXIST = 30101,\n        EC_MATCH_QUERY_GAME_ERR = 30102,\n        EC_MATCH_GAME_INFO_NOT_EXIST = 30103,\n        EC_MATCH_QUERY_REGION_ERR = 30104,\n        EC_MATCH_REGION_INFO_NOT_EXIST = 30105,\n        EC_MATCH_TEAM_FAIL = 30106,\n        EC_MATCH_PLAY_RULE_NOT_RUNNING = 30107,\n        EC_MATCH_PLAY_ATTR_NOT_FOUND = 30108,\n        EC_MATCH_PLAY_RULE_NOT_FOUND = 30109,\n        EC_MATCH_PLAY_RULE_ATTR_SEGMENT_NOT_FOUND = 30110,\n        EC_MATCH_PLAY_RULE_FUNC_ERR = 30111,\n        EC_MATCH_GET_PLAYER_ATTR_FAIL = 30112,\n        EC_MATCH_GET_TEAM_ATTR_FAIL = 30113,\n        EC_MATCH_INNER_LOGIC_ERR = -30150,\n        EC_MATCH_INNER_PARAMS_ERR = -30160,\n        EC_RELAY_ALREADY_EXISTS = 40000,\n        EC_RELAY_NOT_EXISTS = 40001,\n        EC_RELAY_DATA_EXCEED_LIMITED = 40002,\n        EC_RELAY_MEMBER_ALREADY_EXISTS = 40003,\n        EC_RELAY_MEMBER_NOT_EXISTS = 40004,\n        EC_RELAY_STATE_INVALID = 40005,\n        EC_RELAY_INVALID_FRAME_RATE = 40006,\n        EC_RELAY_SET_FRAME_RATE_FORBIDDEN = 40007,\n        EC_RELAY_NO_MEMBERS = 40008,\n        EC_RELAY_GAMESVR_SERVICE_NOT_OPEN = 40009,\n        EC_RELAY_REQ_POD_FAIL = 40010,\n        EC_RELAY_NO_AVAILABLE_POD = 40011,\n        EC_RELAY_GET_FRAME_CACHE_FAIL = 40012,\n        EC_RELAY_HKV_CACHE_ERROR = 40015,\n        EC_RELAY_REDIS_CACHE_ERROR = 40016,\n        EC_RELAY_NOTIFY_RELAYWORKER_FAIL = 40018,\n        EC_RELAY_RESET_RELAY_ROOM_FAIL = 40019,\n        EC_RELAY_CLEAN_RELAY_ROOM_FAIL = 40020,\n        EC_RELAY_NO_PERMISSION = 40100,\n        EC_RELAY_NOTIFY_GAMESVR_FAIL = 40200,\n        EC_RELAY_FORWARD_TO_GAMESVR_FAIL = 40201,\n        EC_RELAY_FORWARD_TO_CLIENT_FAIL = 40202,\n        EC_INVALID_PARAMS = 60000,\n        EC_INVALID_PARAMS_PLAY_MODE_VERSION = 60001,\n        EC_INVALID_PARAMS_PLAY_MODE_RULETYPE = 60002,\n        EC_INVALID_PARAMS_PLAY_MODE_EXPRESSION = 60003,\n        EC_INVALID_PARAMS_PLAY_MODE_TEAM = 60004,\n        EC_INVALID_PARAMS_MSGQ_ENCODE = 60020,\n        EC_INVALID_PARAMS_MSGQ_DECODE = 60021,\n        EC_INVALID_PARAMS_GAME_ID = 61000,\n        EC_INVALID_PARAMS_PLAYER_INFO = 61001,\n        EC_INVALID_PARAMS_MAX_PLAYERS = 61002,\n        EC_INVALID_PARAMS_ROOM_TYPE = 61003,\n        EC_INVALID_PARAMS_PLAYER_ID = 61004,\n        EC_INVALID_PARAMS_MATCH_TYPE = 61005,\n        EC_INVALID_PARAMS_MATCH_CODE = 61006,\n        EC_INVALID_PARAMS_OPEN_ID = 61007,\n        EC_INVALID_PARAMS_PLATFORM = 61008,\n        EC_INVALID_PARAMS_TIMESTAMP = 61009,\n        EC_INVALID_PARAMS_SIGN = 61010,\n        EC_INVALID_PARAMS_NONCE = 61011,\n        EC_INVALID_PARAMS_TOKEN = 61012,\n        EC_INVALID_PARAMS_NETWORK_STATE = 61013,\n        EC_INVALID_PARAMS_ROOM_NAME = 61014,\n        EC_INVALID_PARAMS_CREATE_ROOM_TYPE = 61015,\n        EC_INVALID_PARAMS_DEVICE_ID = 61016,\n        EC_INVALID_PARAMS_PAGE_NO = 61017,\n        EC_INVALID_PARAMS_PAGE_SIZE = 61018,\n        EC_INVALID_PARAMS_PLAYER_LIST = 61019,\n        EC_INVALID_PARAMS_MESSAGE = 61020,\n        EC_INVALID_CHANGE_ROOM_OPTION = 61021,\n        EC_MYSPP_SYSTEM_ERR = -1000,\n        EC_REDIS_KEY_NOT_EXIST = -66000,\n        EC_REDIS_SET_OP_ERR = -66001,\n        EC_REDIS_GET_OP_ERR = -66002,\n        EC_REDIS_DEL_OP_ERR = -66003,\n        EC_REDIS_EXPIRE_OP_ERR = -66004,\n        EC_REDIS_LOCK_OP_ERR = -66005,\n        EC_REDIS_LOCK_ALREADY_EXIST = -66006,\n        EC_REDIS_LIST_OP_ERR = -66020,\n        EC_REDIS_LIST_POP_EMPTY = -66021,\n        EC_REDIS_POOL_GET_INSTANCE_FAIL = -66022,\n        EC_REDIS_SET_IS_EMPTY = -66023,\n        EC_REDIS_OP_INVALID_PARAMS = -66024,\n        EC_MYSQL_NO_ROW_FOUND = -66100,\n        EC_MYSQL_MULTI_ROW_FOUND = -66101,\n        EC_MYSQL_INSERT_FAIL = -66102,\n        EC_MYSQL_DELETE_FAIL = -66103,\n        EC_MYSQL_UPDATE_FAIL = -66104,\n        EC_MYSQL_QUERYS_FAIL = -66105,\n        EC_PB_SERIALIZE_TO_STR_ERR = -66200,\n        EC_PB_PARSE_FROM_STR_ERR = -66201,\n        EC_DATA_FORMAT_ERR = -66210,\n        EC_JSON_FORMAT_ERR = -66211,\n        EC_JSON_PLAY_MODE_FORMAT_ERR = -66212,\n        EC_JSON_PLAY_MODE_PARISE_ERR = -66213,\n        EC_INVALID_PARAMS_RECORE_ID = -66601,\n        EC_HASHID_ERR = -66700,\n        EC_HASHID_ENCODE_ERR = -66701,\n        EC_HASHID_DECODE_ERR = -66702,\n        EC_CONF_ROOM_ID_BUCKET_ERR = -66801,\n        EC_SDK_SEND_FAIL = 90001,\n        EC_SDK_UNINIT = 90002,\n        EC_SDK_RES_TIMEOUT = 90003,\n        EC_SDK_NO_LOGIN = 90004,\n        EC_SDK_NO_CHECK_LOGIN = 90005,\n        EC_SDK_SOCKET_ERROR = 90006,\n        EC_SDK_SOCKET_CLOSE = 90007,\n        EC_SDK_NO_ROOM = 90008\n    }\n    namespace types {\n        /**\n            * @name 初始化回调参数\n            * @field {number} serverTime 服务器时间戳（单位：毫秒）\n            */\n        interface InitRsp {\n            serverTime: number;\n        }\n        /**\n         * @name 玩家信息参数\n         * @field {string} name  玩家昵称\n         * @field {number} customPlayerStatus  自定义玩家状态\n         * @field {string} customProfile  自定义玩家信息\n         */\n        interface PlayerInfoPara {\n            name: string;\n            customPlayerStatus: number;\n            customProfile: string;\n        }\n        /**\n         * @name 玩家信息参数\n         * @field {string} name  玩家昵称\n         * @field {number} customPlayerStatus  自定义玩家状态\n         * @field {string} customProfile  自定义玩家信息\n         * @field {MGOBE.types.MatchAttribute[]} matchAttributes  匹配属性\n         */\n        interface MatchPlayerInfoPara {\n            name: string;\n            customPlayerStatus: number;\n            customProfile: string;\n            matchAttributes: MGOBE.types.MatchAttribute[];\n        }\n        /**\n         * @name  初始化参数：游戏信息\n         * @description 游戏秘钥指控制台上的“游戏key”。在初始化SDK时，secretKey、CreateSignature两个参数传其中一个即可。如果实现了CreateSignature方法，则忽略secretKey参数。\n         * @description CreateSignature用于计算签名signature，优点在于避免客户端泄露游戏密钥。\n         * @field {string} gameId  游戏ID\n         * @field {string} openId  玩家openId\n         * @field {string} secretKey  游戏秘钥\n         * @field {MGOBE.types.CreateSignature} createSignature  签名函数\n         */\n        interface GameInfoPara {\n            gameId: string;\n            openId: string;\n            secretKey?: string;\n            createSignature?: MGOBE.types.CreateSignature;\n        }\n        /**\n         * @name  初始化参数：配置参数\n         * @description 服务地址指控制台上的“域名”\n         * @field {number} reconnectMaxTimes  重连接次数\n         * @field {number} reconnectInterval  重连接时间间隔\n         * @field {number} resendInterval  消息重发时间间隔\n         * @field {number} resendTimeout  消息重发超时时间\n         * @field {string} url  服务地址\n         * @field {boolean} isAutoRequestFrame  是否自动补帧\n         * @field {string} cacertNativeUrl  本地CA根证书路径（CocosNative环境需要该参数）\n         */\n        interface ConfigPara {\n            reconnectMaxTimes?: number;\n            reconnectInterval?: number;\n            resendInterval?: number;\n            resendTimeout?: number;\n            url?: string;\n            isAutoRequestFrame?: boolean;\n            cacertNativeUrl?: string;\n        }\n        /**\n         * @name  初始化签名\n         * @description 可以使用签名的方式初始化SDK，避免客户端泄露游戏密钥。\n         * @field {string} sign  签名\n         * @field {number} nonce  随机正整数（uint64类型）\n         * @field {number} timestamp  时间戳，秒（uint64类型）\n         */\n        interface Signature {\n            sign: string;\n            nonce: number;\n            timestamp: number;\n        }\n        /**\n         * @name 签名函数\n         * @description 开发者如果使用签名方式初始化SDK，需要实现该方法，并在callback中回调Signature对象。\n         * @field {(signature: MGOBE.types.Signature) => any} callback  回调函数，在该函数返回Signature对象\n         */\n        type CreateSignature = (callback: (signature: MGOBE.types.Signature) => any) => any;\n        /**\n         * @name 修改玩家状态参数\n         * @field {number} customPlayerStatus  自定义玩家状态\n         */\n        interface ChangeCustomPlayerStatusPara {\n            customPlayerStatus: number;\n        }\n        /**\n         * @name  创建房间参数\n         * @field {string} roomName  房间名称\n         * @field {string} roomType  房间类型\n         * @field {number} maxPlayers  房间最大玩家数量\n         * @field {boolean} isPrivate  是否私有\n         * @field {string} customProperties  自定义房间属性\n         * @field {MGOBE.types.PlayerInfoPara} playerInfo  玩家信息\n         */\n        interface CreateRoomPara {\n            roomName: string;\n            roomType: string;\n            maxPlayers: number;\n            isPrivate: boolean;\n            customProperties: string;\n            playerInfo: MGOBE.types.PlayerInfoPara;\n        }\n        /**\n         * @name 创建团队房间参数\n         * @field {string} roomName  房间名称\n         * @field {string} roomType  房间类型\n         * @field {number} maxPlayers  房间最大玩家数量\n         * @field {boolean} isPrivate  是否私有\n         * @field {string} customProperties  自定义房间属性\n         * @field {MGOBE.types.PlayerInfoPara} playerInfo  玩家信息\n         * @field {number} teamNumber  队伍数量\n         */\n        interface CreateTeamRoomPara {\n            roomName: string;\n            roomType: string;\n            maxPlayers: number;\n            isPrivate: boolean;\n            customProperties: string;\n            playerInfo: MGOBE.types.PlayerInfoPara;\n            teamNumber: number;\n        }\n        /**\n         * @name 加入房间参数\n         * @field {MGOBE.types.PlayerInfoPara} playerInfo  玩家信息\n         */\n        interface JoinRoomPara {\n            playerInfo: MGOBE.types.PlayerInfoPara;\n        }\n        /**\n         * @name 加入团队房间参数\n         * @field {MGOBE.types.PlayerInfoPara} playerInfo  玩家信息\n         * @field {string} teamId  队伍ID\n         */\n        interface JoinTeamRoomPara {\n            playerInfo: MGOBE.types.PlayerInfoPara;\n            teamId: string;\n        }\n        /**\n         * @name 房间变更参数\n         * @field {string} roomName  房间名称（可选）\n         * @field {string} owner  房主ID（可选）\n         * @field {boolean} isPrivate  是否私有（可选）\n         * @field {string} customProperties  自定义房间属性（可选）\n         * @field {boolean} isForbidJoin  是否禁止加入房间（可选）\n         */\n        interface ChangeRoomPara {\n            roomName?: string;\n            owner?: string;\n            isPrivate?: boolean;\n            customProperties?: string;\n            isForbidJoin?: boolean;\n        }\n        /**\n         * @name 移除房间内玩家参数\n         * @field {string} removePlayerId  被移除玩家ID\n         */\n        interface RemovePlayerPara {\n            removePlayerId: string;\n        }\n        /**\n         * @name 获取房间列表参数\n         * @field {number} pageNo  页号，从1开始\n         * @field {number} pageSize  每页数量，最大为10\n         * @field {string} roomType  房间类型（可选）\n         * @field {boolean} isDesc  是否按照房间创建时间倒序\n         */\n        interface GetRoomListPara {\n            pageNo: number;\n            pageSize: number;\n            roomType?: string;\n            isDesc?: boolean;\n        }\n        /**\n         * @name 获取房间参数\n         * @field {string} roomId  房间ID\n         */\n        interface GetRoomByRoomIdPara {\n            roomId: string;\n        }\n        /**\n         * @name 多人匹配参数\n         * @description 匹配 code 需要在控制台创建匹配获得。\n         * @field {string} matchCode  匹配Code\n         * @field {MGOBE.types.MatchPlayerInfoPara} playerInfo  玩家信息\n         */\n        interface MatchPlayersPara {\n            matchCode: string;\n            playerInfo: MGOBE.types.MatchPlayerInfoPara;\n        }\n        /**\n         * @name 房间匹配参数\n         * @field {MGOBE.types.PlayerInfoPara} playerInfo  玩家信息\n         * @field {number} maxPlayers  房间最大玩家数量\n         * @field {string} roomType  房间的类型\n         */\n        interface MatchRoomPara {\n            playerInfo: MGOBE.types.PlayerInfoPara;\n            maxPlayers: number;\n            roomType: string;\n        }\n        /**\n         * @name 组队匹配玩家信息参数\n         * @field {string} id  玩家ID\n         * @field {string} name  玩家昵称\n         * @field {number} customPlayerStatus  自定义玩家状态\n         * @field {string} customProfile  自定义玩家信息\n         * @field {MGOBE.types.MatchAttribute[]} matchAttributes  匹配属性\n         */\n        interface MatchGroupPlayerInfoPara {\n            id: string;\n            name: string;\n            customPlayerStatus: number;\n            customProfile: string;\n            matchAttributes: MGOBE.types.MatchAttribute[];\n        }\n        /**\n         * @name 组队匹配参数\n         * @description 匹配 code 需要在控制台创建匹配获得。\n         * @field {string} matchCode  匹配Code\n         * @field {MGOBE.types.MatchGroupPlayerInfoPara[]} playerInfoList[]  队员信息\n         */\n        interface MatchGroupPara {\n            matchCode: string;\n            playerInfoList: MGOBE.types.MatchGroupPlayerInfoPara[];\n        }\n        /**\n         * @name 组队匹配结束广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         * @field {number} errCode  错误码\n         */\n        interface MatchBst {\n            roomInfo: MGOBE.types.RoomInfo;\n            errCode: number;\n        }\n        /**\n         * @name 组队匹配取消广播回调参数\n         * @field {string} matchCode  匹配Code\n         * @field {string} playerId  发起取消匹配的玩家ID\n         */\n        interface CancelMatchBst {\n            matchCode: string;\n            playerId: string;\n        }\n        /**\n         * @name 取消匹配参数\n         * @field {MGOBE.types.MatchType}  matchType 匹配类型\n         */\n        interface CancelPlayerMatchPara {\n            matchType: MGOBE.types.MatchType;\n        }\n        /**\n         * @name 发送帧数据参数\n         * @field {object} data  帧数据\n         */\n        interface SendFramePara {\n            data: object;\n        }\n        /**\n         * @name 请求补帧参数\n         * @description 补帧范围大于等于beginFrameId，小于等于endFrameId\n         * @field {number} beginFrameId  起始帧号\n         * @field {number} endFrameId  结束帧号\n         */\n        interface RequestFramePara {\n            beginFrameId: number;\n            endFrameId: number;\n        }\n        /**\n         * @name 消息接收者类型\n         * @field {1} ROOM_ALL 全部玩家\n         * @field {2} ROOM_OTHERS 除自己外的其他玩家\n         * @field {3} ROOM_SOME 房间中部分玩家\n         */\n        enum RecvType {\n            ROOM_ALL = 1,\n            ROOM_OTHERS = 2,\n            ROOM_SOME = 3\n        }\n        /**\n         * @name 发送房间内消息参数\n         * @field {string[]} recvPlayerList  接收消息玩家ID列表\n         * @field {string} msg  消息内容\n         * @field {MGOBE.types.RecvType} recvType  消息接收者类型\n         */\n        interface SendToClientPara {\n            recvPlayerList: string[];\n            msg: string;\n            recvType: MGOBE.types.RecvType;\n        }\n        /**\n         * @name 发自定义服务消息参数\n         * @field {object} data  消息内容\n         */\n        interface SendToGameSvrPara {\n            data: object;\n        }\n        /**\n         * @name 自定义服务消息广播回调参数\n         * @field {number} roomId  房间ID\n         * @field {string[]} playerIdList  接收消息玩家ID列表\n         * @field {object} data  消息内容\n         */\n        interface RecvFromGameSvrBst {\n            roomId: string;\n            recvPlayerIdList: string[];\n            data: object;\n        }\n        /**\n         * @name 帧内容\n         * @field {string} playerId  玩家ID\n         * @field {object} data  玩家帧内容\n         * @field {number} timestamp  时间戳，各玩家本地发送帧的时间\n         */\n        interface FrameItem {\n            playerId: string;\n            data: object;\n            timestamp: number;\n        }\n        /**\n         * @name 帧数据\n         * @description 附加信息包含一个 number 类型随机种子，开发者可以使用帧 ID 与随机种子组合成一个值来初始化 RandomUtil 工具。\n         * @description time 为 SDK 拟合出来的时间，目的是使每一帧到达客户端的时间尽量均匀分布，并且时间间隔尽量接近帧率的倒数。\n         * @description isReplay 表示该帧是否为自动补帧产生的帧，自动补帧需要在初始化 Listener 时设置。\n         * @field {number} frameId  帧ID\n         * @field {MGOBE.types.FrameItem[]} items  帧内容\n         * @field {MGOBE.types.FrameExtInfo} ext  附加信息\n         * @field {number} roomId  房间ID\n         * @field {number} time  该帧到达客户端时间\n         * @field {boolean} isReplay  是否为补帧\n         */\n        interface Frame {\n            id: number;\n            items: MGOBE.types.FrameItem[];\n            ext: MGOBE.types.FrameExtInfo;\n            roomId: string;\n            time?: number;\n            isReplay?: boolean;\n        }\n        /**\n         * @name 帧广播回调参数\n         * @field {MGOBE.types.Frame} frame  帧数据\n         */\n        interface RecvFrameBst {\n            frame: MGOBE.types.Frame;\n        }\n        /**\n         * @name 请求补帧回调参数\n         * @field {MGOBE.types.Frame[]} frames  帧数据数组\n         */\n        interface RequestFrameRsp {\n            frames: MGOBE.types.Frame[];\n        }\n        /**\n         * @name 玩家加入房间广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         * @field {string} joinPlayerId  加房玩家ID\n         */\n        interface JoinRoomBst {\n            roomInfo: MGOBE.types.RoomInfo;\n            joinPlayerId: string;\n        }\n        /**\n         * @name 玩家退出房间广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         * @field {string} leavePlayerId  退房玩家ID\n         */\n        interface LeaveRoomBst {\n            roomInfo: MGOBE.types.RoomInfo;\n            leavePlayerId: string;\n        }\n        /**\n         * @name 房间被解散广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间解散前的信息\n         */\n        interface DismissRoomBst {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 房间属性变更广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface ChangeRoomBst {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 房间内玩家被移除广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         * @field {string} removePlayerId  被移除玩家ID\n         */\n        interface RemovePlayerBst {\n            roomInfo: MGOBE.types.RoomInfo;\n            removePlayerId: string;\n        }\n        /**\n         * @name 房间消息广播回调参数\n         * @field {number} roomId  房间ID\n         * @field {string} sendPlayerId  发送者ID\n         * @field {string} msg  消息内容\n         */\n        interface RecvFromClientBst {\n            roomId: string;\n            sendPlayerId: string;\n            msg: string;\n        }\n        /**\n         * @name 房间内玩家网络状态变化广播回调参数\n         * @field {string} changePlayerId  玩家ID\n         * @field {MGOBE.types.NetworkState} networkState  网络状态\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface ChangePlayerNetworkStateBst {\n            changePlayerId: string;\n            networkState: MGOBE.types.NetworkState;\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 玩家自定义状态变化广播回调参数\n         * @field {string} changePlayerId  玩家ID\n         * @field {number} customPlayerStatus  自定义玩家信息\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface ChangeCustomPlayerStatusBst {\n            changePlayerId: string;\n            customPlayerStatus: number;\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 开始帧同步广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface StartFrameSyncBst {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 停止帧同步广播回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface StopFrameSyncBst {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 房间属性\n         * @description isPrivate 属性为 true 表示该房间为私有房间，不能被 matchRoom 接口匹配到。\n         * @field {string} id  房间ID\n         * @field {string} name  房间名称\n         * @field {string} type  房间类型\n         * @field {MGOBE.types.CreateRoomType} createType  创建房间方式\n         * @field {number} maxPlayers  房间最大玩家数量\n         * @field {string} owner  房主ID\n         * @field {boolean} isPrivate  是否私有\n         * @field {string} customProperties  房间自定义属性\n         * @field {MGOBE.types.PlayerInfo[]} playerList  玩家列表\n         * @field {MGOBE.types.TeamInfo[]} teamList  团队属性\n         * @field {MGOBE.types.FrameSyncState} frameSyncState  房间帧同步状态\n         * @field {number} frameRate  帧率\n         * @field {string} routeId  路由ID\n         * @field {number} createTime  房间创建时的时间戳（单位：秒）\n         * @field {number} startGameTime  开始帧同步时的时间戳（单位：秒）\n         * @field {number} isForbidJoin  是否禁止加入房间\n         */\n        interface RoomInfo {\n            id: string;\n            name: string;\n            type: string;\n            createType: MGOBE.types.CreateRoomType;\n            maxPlayers: number;\n            owner: string;\n            isPrivate: boolean;\n            customProperties: string;\n            playerList: MGOBE.types.PlayerInfo[];\n            teamList: MGOBE.types.TeamInfo[];\n            frameSyncState: MGOBE.types.FrameSyncState;\n            frameRate: number;\n            routeId: string;\n            createTime: number;\n            startGameTime: number;\n            isForbidJoin: boolean;\n        }\n        /**\n         * @name 修改玩家状态回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface ChangeCustomPlayerStatusRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 创建房间回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface CreateRoomRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 加入房间回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface JoinRoomRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 退出房间回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface LeaveRoomRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 解散房间回调参数\n         */\n        interface DismissRoomRsp {\n        }\n        /**\n         * @name 修改房间回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface ChangeRoomRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 移除房间内玩家回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface RemovePlayerRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 获取房间信息回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface GetRoomByRoomIdRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 获取房间列表回调参数\n         * @field {MGOBE.types.RoomInfo[]} roomList  房间列表\n         * @field {number} total  房间总数\n         */\n        interface GetRoomListRsp {\n            gameId: string;\n            roomList: MGOBE.types.RoomInfo[];\n            total: number;\n        }\n        /**\n         * @name 多人匹配回调参数\n         * @field {MGOBE.types.MatchType} matchType  匹配类型\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface MatchPlayersRsp {\n            matchType?: MGOBE.types.MatchType;\n            roomInfo?: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 房间匹配回调参数\n         * @field {MGOBE.types.RoomInfo} roomInfo  房间信息\n         */\n        interface MatchRoomSimpleRsp {\n            roomInfo: MGOBE.types.RoomInfo;\n        }\n        /**\n         * @name 组队匹配回调参数\n         * @field {string} matchCode  匹配Code\n         */\n        interface MatchGroupRsp {\n            matchCode: string;\n        }\n        /**\n         * @name 取消匹配回调参数\n         */\n        interface CancelPlayerMatchRsp {\n        }\n        /**\n         * @name  开始帧同步回调参数\n         */\n        interface StartFrameSyncRsp {\n        }\n        /**\n         * @name 停止帧同步回调参数\n         */\n        interface StopFrameSyncRsp {\n        }\n        /**\n         * @name 发送帧同步数据回调参数\n         */\n        interface SendFrameRsp {\n        }\n        /**\n         * @name 房间内发送消息回调参数\n         */\n        interface SendToClientRsp {\n        }\n        /**\n         * @name 发送自定义服务消息回调参数\n         */\n        interface SendToGameSvrRsp {\n        }\n        /**\n         * @name 匹配属性\n         * @field {string} name  属性名称\n         * @field {number} value  属性值\n         */\n        interface MatchAttribute {\n            name: string;\n            value: number;\n        }\n        /**\n         * @name 匹配类型\n         * @field {1} ROOM_SIMPLE 房间匹配\n         * @field {2} PLAYER_COMPLEX 玩家匹配\n         */\n        enum MatchType {\n            ROOM_SIMPLE = 1,\n            PLAYER_COMPLEX = 2\n        }\n        /**\n         * @name 帧数据附加信息\n         * @field {number} seed  随机数种子\n         */\n        interface FrameExtInfo {\n            seed: number;\n        }\n        /**\n         * @name 创建房间方式\n         * @field {0} COMMON_CREATE  普通创建\n         * @field {1} MATCH_CREATE  匹配创建\n         */\n        enum CreateRoomType {\n            COMMON_CREATE = 0,\n            MATCH_CREATE = 1\n        }\n        /**\n         * @name 网络状态\n         * @field {0} COMMON_OFFLINE  房间中玩家掉线\n         * @field {1} COMMON_ONLINE  房间中玩家在线\n         * @field {2} RELAY_OFFLINE  帧同步中玩家掉线\n         * @field {3} RELAY_ONLINE  帧同步中玩家在线\n         */\n        enum NetworkState {\n            COMMON_OFFLINE = 0,\n            COMMON_ONLINE = 1,\n            RELAY_OFFLINE = 2,\n            RELAY_ONLINE = 3\n        }\n        /**\n         * @name 房间帧同步状态\n         * @field {0} STOP 未开始帧同步\n         * @field {1} START 已开始帧同步\n         */\n        enum FrameSyncState {\n            STOP = 0,\n            START = 1\n        }\n        /**\n         * @name 玩家信息\n         * @field {string} id  玩家ID\n         * @field {string} name  玩家昵称\n         * @field {string} teamId  队伍ID\n         * @field {number} customPlayerStatus  自定义玩家状态\n         * @field {string} customProfile  自定义玩家信息\n         * @field {MGOBE.types.NetworkState} commonNetworkState  玩家在房间的网络状态\n         * @field {MGOBE.types.NetworkState} relayNetworkState  玩家在游戏中的网络状态\n         * @field {boolean} isRobot  玩家是否为机器人\n         * @field {MGOBE.types.MatchAttribute[]} matchAttributes  玩家匹配属性列表（isRobot为true时生效）\n         */\n        interface PlayerInfo {\n            id: string;\n            name: string;\n            teamId: string;\n            customPlayerStatus: number;\n            customProfile: string;\n            commonNetworkState: MGOBE.types.NetworkState;\n            relayNetworkState: MGOBE.types.NetworkState;\n            isRobot: boolean;\n            matchAttributes: MGOBE.types.MatchAttribute[];\n        }\n        /**\n         * @name 队伍信息\n         * @field {string} id  队伍ID\n         * @field {string} name  队伍名称\n         * @field {number} minPlayers  队伍最小人数\n         * @field {number} maxPlayers  队伍最大人数\n         */\n        interface TeamInfo {\n            id: string;\n            name: string;\n            minPlayers: number;\n            maxPlayers: number;\n        }\n        /**\n         * 响应回调参数\n         * @field {number} code  错误码\n         * @field {string} msg  错误信息\n         * @field {string} seq  响应序列号\n         * @field {any} data  响应数据\n         */\n        interface ResponseEvent<T> {\n            code: number;\n            msg: string;\n            seq: string;\n            data?: T;\n        }\n        /**\n         * 广播回调参数\n         * @field {any} data  广播数据\n         * @field {string} seq  广播序列号\n         */\n        interface BroadcastEvent<T> {\n            data: T;\n            seq: string;\n        }\n        /**\n         * 响应回调函数\n         */\n        type ReqCallback<T> = (event: MGOBE.types.ResponseEvent<T>) => any;\n\n    }\n}"
}