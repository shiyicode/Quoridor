{
  "__type__": "cc.TextAsset",
  "_name": "puremvc.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare module puremvc\n{\n\texport interface ICommand\n\t\textends INotifier\n\t{\n\t\texecute( notification:INotification ):void;\n\t}\n\n\texport interface IController\n\t{\n\t\texecuteCommand( notification:INotification ):void;\n\t\tregisterCommand( notificationName:string, commandClassRef:Function ):void;\n\t\thasCommand( notificationName:string ):boolean;\n\t\tremoveCommand( notificationName:string ):void;\n\t}\n\n\texport interface IFacade\n\t\textends INotifier\n\t{\n\t\tregisterCommand( notificationName:string, commandClassRef:Function ):void;\n\t\tremoveCommand( notificationName:string ): void;\n\t\thasCommand( notificationName:string ):boolean;\n\t\tregisterProxy( proxy:IProxy ):void;\n\t\tretrieveProxy( proxyName:string ):IProxy;\n\t\tremoveProxy( proxyName:string ):IProxy;\n\t\thasProxy( proxyName:string ):boolean;\n\t\tregisterMediator( mediator:IMediator ):void;\n\t\tretrieveMediator( mediatorName:string ):IMediator;\n\t\tremoveMediator( mediatorName:string ):IMediator;\n\t\thasMediator( mediatorName:string ):boolean;\n\t\tnotifyObservers( notification:INotification ):void;\n\t}\n\n\texport interface IMediator\n\t\textends INotifier\n\t{\n\t\tgetMediatorName():string;\n\t\tgetViewComponent():any;\n\t\tsetViewComponent( viewComponent:any ):void;\n\t\tlistNotificationInterests( ):string[];\n\t\thandleNotification( notification:INotification ):void;\n\t\tonRegister():void;\n\t\tonRemove():void;\n\t}\n\n\texport interface IModel\n\t{\n\t\tregisterProxy( proxy:IProxy ):void;\n\t\tremoveProxy( proxyName:string ):IProxy;\n\t\tretrieveProxy( proxyName:string ):IProxy;\n\t\thasProxy( proxyName:string ):boolean;\n\t}\n\n\texport interface INotification\n\t{\n\t\tgetName():string;\n\t\tsetBody( body:any ):void;\n\t\tgetBody():any;\n\t\tsetType( type:string ):void;\n\t\tgetType():string;\n\t\ttoString():string;\n\t}\n\n\texport interface INotifier\n\t{\n\t\tsendNotification( name:string, body?:any, type?:string ):void;\n\t}\n\n\texport interface IObserver\n\t{\n\t\tsetNotifyMethod( notifyMethod:Function ):void;\n\t\tsetNotifyContext( notifyContext:any ):void;\n\t\tnotifyObserver( notification:INotification ):void;\n\t\tcompareNotifyContext( object:any ):boolean;\n\t}\n\n\texport interface IProxy\n\t\textends INotifier\n\t{\n\t\tgetProxyName():string;\n\t\tsetData( data:any ):void;\n\t\tgetData():any;\n\t\tonRegister( ):void;\n\t\tonRemove( ):void;\n\t}\n\n\texport interface IView\n\t{\n\t\tregisterObserver( notificationName:string, observer:IObserver ):void;\n\t\tremoveObserver( notificationName:string, notifyContext:any ):void;\n\t\tnotifyObservers( notification:INotification ):void;\n\t\tregisterMediator( mediator:IMediator ):void;\n\t\tretrieveMediator( mediatorName:string ):IMediator;\n\t\tremoveMediator( mediatorName:string ):IMediator;\n\t\thasMediator( mediatorName:string ):boolean;\n\t}\n\n    export class Observer\n\t\timplements IObserver\n\t{\n        public notify: Function;\n        public context: any;\n        constructor (notifyMethod: Function, notifyContext: any);\n        private getNotifyMethod(): Function;\n        public setNotifyMethod(notifyMethod: Function): void;\n        private getNotifyContext(): any;\n        public setNotifyContext(notifyContext: any): void;\n        public notifyObserver(notification: INotification): void;\n        public compareNotifyContext(object: any): boolean;\n    }\n\t\n\texport class View\n\t\timplements IView\n\t{\n        public mediatorMap: Object;\n        public observerMap: Object;\n        constructor ();\n        public initializeView(): void;\n        public registerObserver(notificationName: string, observer: IObserver): void;\n        public removeObserver(notificationName: string, notifyContext: any): void;\n        public notifyObservers(notification: INotification): void;\n        public registerMediator(mediator: IMediator): void;\n        public retrieveMediator(mediatorName: string): IMediator;\n        public removeMediator(mediatorName: string): IMediator;\n        public hasMediator(mediatorName: string): boolean;\n        static SINGLETON_MSG: string;\n        static instance: IView;\n        static getInstance(): IView;\n    }\n\n\n    export class Controller\n\t\timplements IController\n\t{\n        public view: IView;\n        public commandMap: Object;\n        constructor ();\n        public initializeController(): void;\n        public executeCommand(notification: INotification): void;\n        public registerCommand(notificationName: string, commandClassRef: Function): void;\n        public hasCommand(notificationName: string): boolean;\n        public removeCommand(notificationName: string): void;\n        static instance: IController;\n        static SINGLETON_MSG: string;\n        static getInstance(): IController;\n    }\n\n    export class Model\n\t\timplements IModel\n\t{\n        public proxyMap: Object;\n        constructor ();\n        public initializeModel(): void;\n        public registerProxy(proxy: IProxy): void;\n        public removeProxy(proxyName: string): IProxy;\n        public retrieveProxy(proxyName: string): IProxy;\n        public hasProxy(proxyName: string): boolean;\n        static SINGLETON_MSG: string;\n        static instance: IModel;\n        static getInstance(): IModel;\n    }\n\n    export class Notification\n\t\timplements INotification\n\t{\n        public name: string;\n        public body: any;\n        public type: string;\n        constructor (name: string, body?: any, type?: string);\n        public getName(): string;\n        public setBody(body: any): void;\n        public getBody(): any;\n        public setType(type: string): void;\n        public getType(): string;\n        public toString(): string;\n    }\n\n    export class Facade\n\t\timplements IFacade\n\t{\n        public model: IModel;\n        public view: IView;\n        public controller: IController;\n        constructor ();\n        public initializeFacade(): void;\n        public initializeModel(): void;\n        public initializeController(): void;\n        public initializeView(): void;\n        public registerCommand(notificationName: string, commandClassRef: Function): void;\n        public removeCommand(notificationName: string): void;\n        public hasCommand(notificationName: string): boolean;\n        public registerProxy(proxy: IProxy): void;\n        public retrieveProxy(proxyName: string): IProxy;\n        public removeProxy(proxyName: string): IProxy;\n        public hasProxy(proxyName: string): boolean;\n        public registerMediator(mediator: IMediator): void;\n        public retrieveMediator(mediatorName: string): IMediator;\n        public removeMediator(mediatorName: string): IMediator;\n        public hasMediator(mediatorName: string): boolean;\n        public notifyObservers(notification: INotification): void;\n        public sendNotification(name: string, body?: any, type?: string): void;\n        static SINGLETON_MSG: string;\n        static instance: IFacade;\n        static getInstance(): IFacade;\n    }\n\n    export class Notifier\n\t\timplements INotifier\n\t{\n        public facade: IFacade;\n        constructor ();\n        public sendNotification(name: string, body?: any, type?: string): void;\n    }\n\n    export class MacroCommand\n\t\textends Notifier\n\t\timplements ICommand, INotifier\n\t{\n        public subCommands: Function[];\n        constructor ();\n        public initializeMacroCommand(): void;\n        public addSubCommand(commandClassRef: Function): void;\n        public execute(notification: INotification): void;\n    }\n\n    export class SimpleCommand\n\t\textends Notifier\n\t\timplements ICommand, INotifier\n\t{\n        public execute(notification: INotification): void;\n    }\n\n    export class Mediator\n\t\textends Notifier\n\t\timplements IMediator, INotifier\n\t{\n        public mediatorName: string;\n        public viewComponent: any;\n        constructor (mediatorName?: string, viewComponent?: any);\n        public getMediatorName(): string;\n        public getViewComponent(): any;\n        public setViewComponent(viewComponent: any): void;\n        public listNotificationInterests(): string[];\n        public handleNotification(notification: INotification): void;\n        public onRegister(): void;\n        public onRemove(): void;\n        static NAME: string;\n    }\n\n    export class Proxy\n\t\textends Notifier\n\t\timplements IProxy, INotifier\n\t{\n        public proxyName: string;\n        public data: any;\n        constructor (proxyName?: string, data?: any);\n        public getProxyName(): string;\n        public setData(data: any): void;\n        public getData(): any;\n        public onRegister(): void;\n        public onRemove(): void;\n        static NAME: string;\n    }\n}\n"
}